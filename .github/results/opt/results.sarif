{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Slither",
          "informationUri": "https://github.com/crytic/slither",
          "version": "0.9.4",
          "rules": [
            {
              "id": "0-0-shadowing-state",
              "name": "shadowing-state",
              "properties": {
                "precision": "very-high",
                "security-severity": "8.0"
              },
              "shortDescription": {
                "text": "State variable shadowing"
              },
              "help": {
                "text": "Remove the state variable shadowing."
              }
            },
            {
              "id": "1-1-unchecked-lowlevel",
              "name": "unchecked-lowlevel",
              "properties": {
                "precision": "high",
                "security-severity": "4.0"
              },
              "shortDescription": {
                "text": "Unchecked low-level calls"
              },
              "help": {
                "text": "Ensure that the return value of a low-level call is checked or logged."
              }
            },
            {
              "id": "1-1-uninitialized-local",
              "name": "uninitialized-local",
              "properties": {
                "precision": "high",
                "security-severity": "4.0"
              },
              "shortDescription": {
                "text": "Uninitialized local variables"
              },
              "help": {
                "text": "Initialize all the variables. If a variable is meant to be initialized to zero, explicitly set it to zero to improve code readability."
              }
            },
            {
              "id": "1-1-unused-return",
              "name": "unused-return",
              "properties": {
                "precision": "high",
                "security-severity": "4.0"
              },
              "shortDescription": {
                "text": "Unused return"
              },
              "help": {
                "text": "Ensure that all the return values of the function calls are used."
              }
            },
            {
              "id": "2-0-shadowing-local",
              "name": "shadowing-local",
              "properties": {
                "precision": "very-high",
                "security-severity": "3.0"
              },
              "shortDescription": {
                "text": "Local variable shadowing"
              },
              "help": {
                "text": "Rename the local variables that shadow another component."
              }
            },
            {
              "id": "2-1-missing-zero-check",
              "name": "missing-zero-check",
              "properties": {
                "precision": "high",
                "security-severity": "3.0"
              },
              "shortDescription": {
                "text": "Missing zero address validation"
              },
              "help": {
                "text": "Check that the address is not zero."
              }
            },
            {
              "id": "2-0-incorrect-modifier",
              "name": "incorrect-modifier",
              "properties": {
                "precision": "very-high",
                "security-severity": "3.0"
              },
              "shortDescription": {
                "text": "Incorrect modifier"
              },
              "help": {
                "text": "All the paths in a modifier must execute `_` or revert."
              }
            },
            {
              "id": "2-1-reentrancy-benign",
              "name": "reentrancy-benign",
              "properties": {
                "precision": "high",
                "security-severity": "3.0"
              },
              "shortDescription": {
                "text": "Reentrancy vulnerabilities"
              },
              "help": {
                "text": "Apply the [`check-effects-interactions` pattern](http://solidity.readthedocs.io/en/v0.4.21/security-considerations.html#re-entrancy)."
              }
            },
            {
              "id": "2-1-reentrancy-events",
              "name": "reentrancy-events",
              "properties": {
                "precision": "high",
                "security-severity": "3.0"
              },
              "shortDescription": {
                "text": "Reentrancy vulnerabilities"
              },
              "help": {
                "text": "Apply the [`check-effects-interactions` pattern](https://docs.soliditylang.org/en/latest/security-considerations.html#re-entrancy)."
              }
            },
            {
              "id": "3-0-assembly",
              "name": "assembly",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Assembly usage"
              },
              "help": {
                "text": "Do not use `evm` assembly."
              }
            },
            {
              "id": "3-0-boolean-equal",
              "name": "boolean-equal",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Boolean equality"
              },
              "help": {
                "text": "Remove the equality to the boolean constant."
              }
            },
            {
              "id": "3-0-pragma",
              "name": "pragma",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Different pragma directives are used"
              },
              "help": {
                "text": "Use one Solidity version."
              }
            },
            {
              "id": "3-1-dead-code",
              "name": "dead-code",
              "properties": {
                "precision": "high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Dead-code"
              },
              "help": {
                "text": "Remove unused functions."
              }
            },
            {
              "id": "3-0-solc-version",
              "name": "solc-version",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Incorrect versions of Solidity"
              },
              "help": {
                "text": "\nDeploy with any of the following Solidity versions:\n- 0.8.18\n\nThe recommendations take into account:\n- Risks related to recent releases\n- Risks of complex code generation changes\n- Risks of new language features\n- Risks of known bugs\n\nUse a simple pragma version that allows any of these versions.\nConsider using the latest version of Solidity for testing."
              }
            },
            {
              "id": "3-0-low-level-calls",
              "name": "low-level-calls",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Low-level calls"
              },
              "help": {
                "text": "Avoid low-level calls. Check the call success. If the call is meant for a contract, check for code existence."
              }
            },
            {
              "id": "3-0-naming-convention",
              "name": "naming-convention",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Conformance to Solidity naming conventions"
              },
              "help": {
                "text": "Follow the Solidity [naming convention](https://solidity.readthedocs.io/en/v0.4.25/style-guide.html#naming-conventions)."
              }
            },
            {
              "id": "3-0-redundant-statements",
              "name": "redundant-statements",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Redundant Statements"
              },
              "help": {
                "text": "Remove redundant statements if they congest code but offer no value."
              }
            },
            {
              "id": "3-1-similar-names",
              "name": "similar-names",
              "properties": {
                "precision": "high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Variable names too similar"
              },
              "help": {
                "text": "Prevent variables from having similar names."
              }
            },
            {
              "id": "3-0-unused-state",
              "name": "unused-state",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Unused state variable"
              },
              "help": {
                "text": "Remove unused state variables."
              }
            },
            {
              "id": "4-0-constable-states",
              "name": "constable-states",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "State variables that could be declared constant"
              },
              "help": {
                "text": "Add the `constant` attribute to state variables that never change."
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "0-0-shadowing-state",
          "message": {
            "text": "StdCheats.vm (lib/forge-std/src/StdCheats.sol#526) shadows:\n\t- StdCheatsSafe.vm (lib/forge-std/src/StdCheats.sol#11)\n",
            "markdown": "[StdCheats.vm](lib/forge-std/src/StdCheats.sol#L526) shadows:\n\t- [StdCheatsSafe.vm](lib/forge-std/src/StdCheats.sol#L11)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdCheats.sol"
                },
                "region": {
                  "startLine": 526,
                  "endLine": 526
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f4c81fcad23447339084a81083c0313666c0ce6e40ab96323b3e0a24eac61041"
          }
        },
        {
          "ruleId": "1-1-unchecked-lowlevel",
          "message": {
            "text": "stdStorage.checked_write(StdStorage,bytes32) (lib/forge-std/src/StdStorage.sol#251-281) ignores return value by (rdat) = who.staticcall(cald) (lib/forge-std/src/StdStorage.sol#265)\n",
            "markdown": "[stdStorage.checked_write(StdStorage,bytes32)](lib/forge-std/src/StdStorage.sol#L251-L281) ignores return value by [(rdat) = who.staticcall(cald)](lib/forge-std/src/StdStorage.sol#L265)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStorage.sol"
                },
                "region": {
                  "startLine": 251,
                  "endLine": 281
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "015d2842e320e97d98866cb85fdc326e06031dd2e1b61f00e3cd0d0626c45b48"
          }
        },
        {
          "ruleId": "1-1-unchecked-lowlevel",
          "message": {
            "text": "StdCheats.dealERC1155(address,address,uint256,uint256,bool) (lib/forge-std/src/StdCheats.sol#630-653) ignores return value by (balData) = token.staticcall(abi.encodeWithSelector(0x00fdd58e,to,id)) (lib/forge-std/src/StdCheats.sol#632)\n",
            "markdown": "[StdCheats.dealERC1155(address,address,uint256,uint256,bool)](lib/forge-std/src/StdCheats.sol#L630-L653) ignores return value by [(balData) = token.staticcall(abi.encodeWithSelector(0x00fdd58e,to,id))](lib/forge-std/src/StdCheats.sol#L632)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdCheats.sol"
                },
                "region": {
                  "startLine": 630,
                  "endLine": 653
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2323d02accdbe0c35ea91eec993dd6154ad39b5fff05b2ea262629e25b1a0c0b"
          }
        },
        {
          "ruleId": "1-1-unchecked-lowlevel",
          "message": {
            "text": "StdCheats.dealERC721(address,address,uint256) (lib/forge-std/src/StdCheats.sol#655-675) ignores return value by (toBalData) = token.staticcall(abi.encodeWithSelector(0x70a08231,to)) (lib/forge-std/src/StdCheats.sol#666)\n",
            "markdown": "[StdCheats.dealERC721(address,address,uint256)](lib/forge-std/src/StdCheats.sol#L655-L675) ignores return value by [(toBalData) = token.staticcall(abi.encodeWithSelector(0x70a08231,to))](lib/forge-std/src/StdCheats.sol#L666)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdCheats.sol"
                },
                "region": {
                  "startLine": 655,
                  "endLine": 675
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5ede2c6bc78c5ce8d3c47b4884477106b3b9ef251a875f9c73a81778d7a83520"
          }
        },
        {
          "ruleId": "1-1-unchecked-lowlevel",
          "message": {
            "text": "StdCheats.dealERC721(address,address,uint256) (lib/forge-std/src/StdCheats.sol#655-675) ignores return value by (fromBalData) = token.staticcall(abi.encodeWithSelector(0x70a08231,abi.decode(ownerData,(address)))) (lib/forge-std/src/StdCheats.sol#661-662)\n",
            "markdown": "[StdCheats.dealERC721(address,address,uint256)](lib/forge-std/src/StdCheats.sol#L655-L675) ignores return value by [(fromBalData) = token.staticcall(abi.encodeWithSelector(0x70a08231,abi.decode(ownerData,(address))))](lib/forge-std/src/StdCheats.sol#L661-L662)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdCheats.sol"
                },
                "region": {
                  "startLine": 655,
                  "endLine": 675
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8c9b405022fe1a18c4b892e889cb5b244f413ff133b31519dc0fafd35a20ddf4"
          }
        },
        {
          "ruleId": "1-1-unchecked-lowlevel",
          "message": {
            "text": "Address.sendValue(address,uint256) (src/libraries/Address.sol#41-50) ignores return value by (success) = recipient.call{value: amount}() (src/libraries/Address.sol#46)\n",
            "markdown": "[Address.sendValue(address,uint256)](src/libraries/Address.sol#L41-L50) ignores return value by [(success) = recipient.call{value: amount}()](src/libraries/Address.sol#L46)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/libraries/Address.sol"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 50
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a0abad9c30f8eed8868918a407eed0d2b54285ab1785fab76abd6a252631b372"
          }
        },
        {
          "ruleId": "1-1-unchecked-lowlevel",
          "message": {
            "text": "StdCheats.dealERC1155(address,address,uint256,uint256,bool) (lib/forge-std/src/StdCheats.sol#630-653) ignores return value by (totSupData) = token.staticcall(abi.encodeWithSelector(0xbd85b039,id)) (lib/forge-std/src/StdCheats.sol#640)\n",
            "markdown": "[StdCheats.dealERC1155(address,address,uint256,uint256,bool)](lib/forge-std/src/StdCheats.sol#L630-L653) ignores return value by [(totSupData) = token.staticcall(abi.encodeWithSelector(0xbd85b039,id))](lib/forge-std/src/StdCheats.sol#L640)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdCheats.sol"
                },
                "region": {
                  "startLine": 630,
                  "endLine": 653
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b07ffa5b045b68d634a7e3ded0b9d63f5184641c40cd9a4197f4cf4fd04ae1cb"
          }
        },
        {
          "ruleId": "1-1-unchecked-lowlevel",
          "message": {
            "text": "StdCheats.deal(address,address,uint256,bool) (lib/forge-std/src/StdCheats.sol#609-628) ignores return value by (balData) = token.staticcall(abi.encodeWithSelector(0x70a08231,to)) (lib/forge-std/src/StdCheats.sol#611)\n",
            "markdown": "[StdCheats.deal(address,address,uint256,bool)](lib/forge-std/src/StdCheats.sol#L609-L628) ignores return value by [(balData) = token.staticcall(abi.encodeWithSelector(0x70a08231,to))](lib/forge-std/src/StdCheats.sol#L611)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdCheats.sol"
                },
                "region": {
                  "startLine": 609,
                  "endLine": 628
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bbac5ea7a6e1874f9310e8fe87fad7567e5df9e7cdfefab3e6b7d687a1b74534"
          }
        },
        {
          "ruleId": "1-1-unchecked-lowlevel",
          "message": {
            "text": "StdCheatsSafe.assumePayable(address) (lib/forge-std/src/StdCheats.sol#515-518) ignores return value by (success) = address(addr).call{value: 0}() (lib/forge-std/src/StdCheats.sol#516)\n",
            "markdown": "[StdCheatsSafe.assumePayable(address)](lib/forge-std/src/StdCheats.sol#L515-L518) ignores return value by [(success) = address(addr).call{value: 0}()](lib/forge-std/src/StdCheats.sol#L516)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdCheats.sol"
                },
                "region": {
                  "startLine": 515,
                  "endLine": 518
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c7a6d3d1d678c70c4b282bc09c8e05a6a577cb081e8a7ad2799dfc123c7a60fe"
          }
        },
        {
          "ruleId": "1-1-unchecked-lowlevel",
          "message": {
            "text": "StdCheats.deal(address,address,uint256,bool) (lib/forge-std/src/StdCheats.sol#609-628) ignores return value by (totSupData) = token.staticcall(abi.encodeWithSelector(0x18160ddd)) (lib/forge-std/src/StdCheats.sol#619)\n",
            "markdown": "[StdCheats.deal(address,address,uint256,bool)](lib/forge-std/src/StdCheats.sol#L609-L628) ignores return value by [(totSupData) = token.staticcall(abi.encodeWithSelector(0x18160ddd))](lib/forge-std/src/StdCheats.sol#L619)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdCheats.sol"
                },
                "region": {
                  "startLine": 609,
                  "endLine": 628
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e2dc2355357c205c839f300767e6bddf073e06881c3fd32d49156235dd241837"
          }
        },
        {
          "ruleId": "1-1-unchecked-lowlevel",
          "message": {
            "text": "stdStorageSafe.find(StdStorage) (lib/forge-std/src/StdStorage.sol#32-105) ignores return value by (rdat) = who.staticcall(cald) (lib/forge-std/src/StdStorage.sol#46)\n",
            "markdown": "[stdStorageSafe.find(StdStorage)](lib/forge-std/src/StdStorage.sol#L32-L105) ignores return value by [(rdat) = who.staticcall(cald)](lib/forge-std/src/StdStorage.sol#L46)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStorage.sol"
                },
                "region": {
                  "startLine": 32,
                  "endLine": 105
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e334c853d3b86fde04ca9b14b4152077306799e8bcf9726c7fc3c63bb219347a"
          }
        },
        {
          "ruleId": "1-1-unchecked-lowlevel",
          "message": {
            "text": "DSTest.failed() (lib/forge-std/lib/ds-test/src/test.sol#47-63) ignores return value by (retdata) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(load(address,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed)))) (lib/forge-std/lib/ds-test/src/test.sol#53-58)\n",
            "markdown": "[DSTest.failed()](lib/forge-std/lib/ds-test/src/test.sol#L47-L63) ignores return value by [(retdata) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(load(address,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed))))](lib/forge-std/lib/ds-test/src/test.sol#L53-L58)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/lib/ds-test/src/test.sol"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 63
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ea29a58a744a4c489451471d492dd8b906e728dcf0abd8de7839b40c77d44666"
          }
        },
        {
          "ruleId": "1-1-unchecked-lowlevel",
          "message": {
            "text": "StdUtils.console2_log(string,string) (lib/forge-std/src/StdUtils.sol#194-197) ignores return value by (status) = address(CONSOLE2_ADDRESS).staticcall(abi.encodeWithSignature(log(string,string),p0,p1)) (lib/forge-std/src/StdUtils.sol#195)\n",
            "markdown": "[StdUtils.console2_log(string,string)](lib/forge-std/src/StdUtils.sol#L194-L197) ignores return value by [(status) = address(CONSOLE2_ADDRESS).staticcall(abi.encodeWithSignature(log(string,string),p0,p1))](lib/forge-std/src/StdUtils.sol#L195)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdUtils.sol"
                },
                "region": {
                  "startLine": 194,
                  "endLine": 197
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f09d7b234f9bcbc23b4555f3e664f6f42dd50325edda934bcf14303afb30ca5f"
          }
        },
        {
          "ruleId": "1-1-unchecked-lowlevel",
          "message": {
            "text": "StdUtils.console2_log(string,uint256) (lib/forge-std/src/StdUtils.sol#189-192) ignores return value by (status) = address(CONSOLE2_ADDRESS).staticcall(abi.encodeWithSignature(log(string,uint256),p0,p1)) (lib/forge-std/src/StdUtils.sol#190)\n",
            "markdown": "[StdUtils.console2_log(string,uint256)](lib/forge-std/src/StdUtils.sol#L189-L192) ignores return value by [(status) = address(CONSOLE2_ADDRESS).staticcall(abi.encodeWithSignature(log(string,uint256),p0,p1))](lib/forge-std/src/StdUtils.sol#L190)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdUtils.sol"
                },
                "region": {
                  "startLine": 189,
                  "endLine": 192
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f2ee566b8c514108c5fb153ec164fd5fb2e5b351ab60d5a730ee737da4a55b90"
          }
        },
        {
          "ruleId": "1-1-unchecked-lowlevel",
          "message": {
            "text": "DSTest.fail() (lib/forge-std/lib/ds-test/src/test.sol#65-76) ignores return value by (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)\n",
            "markdown": "[DSTest.fail()](lib/forge-std/lib/ds-test/src/test.sol#L65-L76) ignores return value by [(status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01)))))](lib/forge-std/lib/ds-test/src/test.sol#L67-L72)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/lib/ds-test/src/test.sol"
                },
                "region": {
                  "startLine": 65,
                  "endLine": 76
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f5175f415f992d795b886ae8a6343de6386fc19e801f9c28b7531ecaafb79118"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "StdCheatsSafe.rawToConvertedEIPTx1559(StdCheatsSafe.RawTx1559).transaction (lib/forge-std/src/StdCheats.sol#279) is a local variable never initialized\n",
            "markdown": "[StdCheatsSafe.rawToConvertedEIPTx1559(StdCheatsSafe.RawTx1559).transaction](lib/forge-std/src/StdCheats.sol#L279) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdCheats.sol"
                },
                "region": {
                  "startLine": 279,
                  "endLine": 279
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0309addae9c2e53ef7d028db53eafb43bbb4f2b27d463abc23b4e5797edb6f90"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "StdCheatsSafe.readEIP1559ScriptArtifact(string).artifact (lib/forge-std/src/StdCheats.sol#259) is a local variable never initialized\n",
            "markdown": "[StdCheatsSafe.readEIP1559ScriptArtifact(string).artifact](lib/forge-std/src/StdCheats.sol#L259) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdCheats.sol"
                },
                "region": {
                  "startLine": 259,
                  "endLine": 259
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "34f1417a4c162ac1623b03a77955699452275a52b5bbabc975673b004fd75065"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "StdCheatsSafe.rawToConvertedEIP1559Detail(StdCheatsSafe.RawTx1559Detail).txDetail (lib/forge-std/src/StdCheats.sol#295) is a local variable never initialized\n",
            "markdown": "[StdCheatsSafe.rawToConvertedEIP1559Detail(StdCheatsSafe.RawTx1559Detail).txDetail](lib/forge-std/src/StdCheats.sol#L295) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdCheats.sol"
                },
                "region": {
                  "startLine": 295,
                  "endLine": 295
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "759595ec66403b82bea488b95605be8d640be8434692d7ff46d771cdb24b1eda"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "StdCheatsSafe.rawToConvertedReceipt(StdCheatsSafe.RawReceipt).receipt (lib/forge-std/src/StdCheats.sol#347) is a local variable never initialized\n",
            "markdown": "[StdCheatsSafe.rawToConvertedReceipt(StdCheatsSafe.RawReceipt).receipt](lib/forge-std/src/StdCheats.sol#L347) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdCheats.sol"
                },
                "region": {
                  "startLine": 347,
                  "endLine": 347
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fd6e3fe96a172bc7a8fa4edcf21e62c569d79c4080cb18caed578e4fc78a6094"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "ERC1967Utils.upgradeToAndCall(address,bytes,bool) (src/ERC1967Utils.sol#89-94) ignores return value by Address.functionDelegateCall(newImplementation,data) (src/ERC1967Utils.sol#92)\n",
            "markdown": "[ERC1967Utils.upgradeToAndCall(address,bytes,bool)](src/ERC1967Utils.sol#L89-L94) ignores return value by [Address.functionDelegateCall(newImplementation,data)](src/ERC1967Utils.sol#L92)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/ERC1967Utils.sol"
                },
                "region": {
                  "startLine": 89,
                  "endLine": 94
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "062bb4620512df056b879b5f499f213373e204758e90826c4a771298f8358203"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "ERC1967Utils.upgradeBeaconToAndCall(address,bytes,bool) (src/ERC1967Utils.sol#171-177) ignores return value by Address.functionDelegateCall(IBeacon(newBeacon).implementation(),data) (src/ERC1967Utils.sol#175)\n",
            "markdown": "[ERC1967Utils.upgradeBeaconToAndCall(address,bytes,bool)](src/ERC1967Utils.sol#L171-L177) ignores return value by [Address.functionDelegateCall(IBeacon(newBeacon).implementation(),data)](src/ERC1967Utils.sol#L175)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/ERC1967Utils.sol"
                },
                "region": {
                  "startLine": 171,
                  "endLine": 177
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "49a3a424c748837067165fe9989153b3cf5316270dbdb97e6b0f83d675f737ff"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "StdCheatsSafe.isFork() (lib/forge-std/src/StdCheats.sol#474-478) ignores return value by vm.activeFork() (lib/forge-std/src/StdCheats.sol#475-477)\n",
            "markdown": "[StdCheatsSafe.isFork()](lib/forge-std/src/StdCheats.sol#L474-L478) ignores return value by [vm.activeFork()](lib/forge-std/src/StdCheats.sol#L475-L477)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdCheats.sol"
                },
                "region": {
                  "startLine": 474,
                  "endLine": 478
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7dcb322f04e5dba300f6c241c26ca702a0bb1e5fcbe8eec1ce4904cbde11a6fb"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "stdStorageSafe.find(StdStorage) (lib/forge-std/src/StdStorage.sol#32-105) ignores return value by (reads) = vm.accesses(address(who)) (lib/forge-std/src/StdStorage.sol#50)\n",
            "markdown": "[stdStorageSafe.find(StdStorage)](lib/forge-std/src/StdStorage.sol#L32-L105) ignores return value by [(reads) = vm.accesses(address(who))](lib/forge-std/src/StdStorage.sol#L50)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStorage.sol"
                },
                "region": {
                  "startLine": 32,
                  "endLine": 105
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "95f21b2102000776137d91694d6ea380b176eb457828b7469b358133744e832a"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "StdUtils.getTokenBalances(address,address[]) (lib/forge-std/src/StdUtils.sol#150-177) ignores return value by (returnData) = multicall.aggregate(calls) (lib/forge-std/src/StdUtils.sol#170)\n",
            "markdown": "[StdUtils.getTokenBalances(address,address[])](lib/forge-std/src/StdUtils.sol#L150-L177) ignores return value by [(returnData) = multicall.aggregate(calls)](lib/forge-std/src/StdUtils.sol#L170)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdUtils.sol"
                },
                "region": {
                  "startLine": 150,
                  "endLine": 177
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c617cf7b58f073bef5ba9da9ec8ed3b159636cc0650ab7bdfe60622d23f6fcb4"
          }
        },
        {
          "ruleId": "2-0-shadowing-local",
          "message": {
            "text": "VmSafe.getLabel(address).label (lib/forge-std/src/Vm.sol#111) shadows:\n\t- VmSafe.label(address,string) (lib/forge-std/src/Vm.sol#109) (function)\n",
            "markdown": "[VmSafe.getLabel(address).label](lib/forge-std/src/Vm.sol#L111) shadows:\n\t- [VmSafe.label(address,string)](lib/forge-std/src/Vm.sol#L109) (function)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/Vm.sol"
                },
                "region": {
                  "startLine": 111,
                  "endLine": 111
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9a41b787a608a6c8d5d850176a21baed64fb44103123947d584ff383e4171f80"
          }
        },
        {
          "ruleId": "2-1-missing-zero-check",
          "message": {
            "text": "TransparentUpgradeableProxy.constructor(address,address,bytes).admin_ (src/TransparentUpgradeableProxy.sol#80) lacks a zero-check on :\n\t\t- _admin = admin_ (src/TransparentUpgradeableProxy.sol#81)\n",
            "markdown": "[TransparentUpgradeableProxy.constructor(address,address,bytes).admin_](src/TransparentUpgradeableProxy.sol#L80) lacks a zero-check on :\n\t\t- [_admin = admin_](src/TransparentUpgradeableProxy.sol#L81)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/TransparentUpgradeableProxy.sol"
                },
                "region": {
                  "startLine": 80,
                  "endLine": 80
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "91a0a74278c3b147f4aff4ab1b85d34b782d6cbe4a183e39190b2a58974124c0"
          }
        },
        {
          "ruleId": "2-0-incorrect-modifier",
          "message": {
            "text": "Modifier StdCheatsSafe.skipWhenForking() (lib/forge-std/src/StdCheats.sol#480-484) does not always execute _; or revert",
            "markdown": "Modifier [StdCheatsSafe.skipWhenForking()](lib/forge-std/src/StdCheats.sol#L480-L484) does not always execute _; or revert"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdCheats.sol"
                },
                "region": {
                  "startLine": 480,
                  "endLine": 484
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "78a905510451c813b44e3f0e45d1cf805f0bacb49f3d55ec5ec4471ad9022ce9"
          }
        },
        {
          "ruleId": "2-0-incorrect-modifier",
          "message": {
            "text": "Modifier StdCheatsSafe.skipWhenNotForking() (lib/forge-std/src/StdCheats.sol#486-490) does not always execute _; or revert",
            "markdown": "Modifier [StdCheatsSafe.skipWhenNotForking()](lib/forge-std/src/StdCheats.sol#L486-L490) does not always execute _; or revert"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdCheats.sol"
                },
                "region": {
                  "startLine": 486,
                  "endLine": 490
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8ebd019ed6d33bba2dec3b70d68baf2c1c0c2c92f9f286a283011b2961196826"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in StdCheatsSafe.noGasMetering() (lib/forge-std/src/StdCheats.sol#492-511):\n\tExternal calls:\n\t- vm.pauseGasMetering() (lib/forge-std/src/StdCheats.sol#493)\n\tState variables written after the call(s):\n\t- gasMeteringOff = true (lib/forge-std/src/StdCheats.sol#502)\n\t- gasMeteringOff = false (lib/forge-std/src/StdCheats.sol#508)\n",
            "markdown": "Reentrancy in [StdCheatsSafe.noGasMetering()](lib/forge-std/src/StdCheats.sol#L492-L511):\n\tExternal calls:\n\t- [vm.pauseGasMetering()](lib/forge-std/src/StdCheats.sol#L493)\n\tState variables written after the call(s):\n\t- [gasMeteringOff = true](lib/forge-std/src/StdCheats.sol#L502)\n\t- [gasMeteringOff = false](lib/forge-std/src/StdCheats.sol#L508)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdCheats.sol"
                },
                "region": {
                  "startLine": 492,
                  "endLine": 511
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0ca8c83ec6f7224ed428bcd2baee9ecd6fa69243fa6380ea6b46f7d90cf30bb4"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in StdAssertions.assertEqCall(address,bytes,address,bytes,bool) (lib/forge-std/src/StdAssertions.sol#344-375):\n\tExternal calls:\n\t- (successA,returnDataA) = address(targetA).call(callDataA) (lib/forge-std/src/StdAssertions.sol#351)\n\t- (successB,returnDataB) = address(targetB).call(callDataB) (lib/forge-std/src/StdAssertions.sol#352)\n\t- assertEq(returnDataA,returnDataB,Call return data does not match) (lib/forge-std/src/StdAssertions.sol#355)\n\t\t- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)\n\t- assertEq(returnDataA,returnDataB,Call revert data does not match) (lib/forge-std/src/StdAssertions.sol#359)\n\t\t- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)\n\t- fail() (lib/forge-std/src/StdAssertions.sol#366)\n\t\t- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)\n\tState variables written after the call(s):\n\t- fail() (lib/forge-std/src/StdAssertions.sol#366)\n\t\t- _failed = true (lib/forge-std/lib/ds-test/src/test.sol#75)\n",
            "markdown": "Reentrancy in [StdAssertions.assertEqCall(address,bytes,address,bytes,bool)](lib/forge-std/src/StdAssertions.sol#L344-L375):\n\tExternal calls:\n\t- [(successA,returnDataA) = address(targetA).call(callDataA)](lib/forge-std/src/StdAssertions.sol#L351)\n\t- [(successB,returnDataB) = address(targetB).call(callDataB)](lib/forge-std/src/StdAssertions.sol#L352)\n\t- [assertEq(returnDataA,returnDataB,Call return data does not match)](lib/forge-std/src/StdAssertions.sol#L355)\n\t\t- [(status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01)))))](lib/forge-std/lib/ds-test/src/test.sol#L67-L72)\n\t- [assertEq(returnDataA,returnDataB,Call revert data does not match)](lib/forge-std/src/StdAssertions.sol#L359)\n\t\t- [(status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01)))))](lib/forge-std/lib/ds-test/src/test.sol#L67-L72)\n\t- [fail()](lib/forge-std/src/StdAssertions.sol#L366)\n\t\t- [(status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01)))))](lib/forge-std/lib/ds-test/src/test.sol#L67-L72)\n\tState variables written after the call(s):\n\t- [fail()](lib/forge-std/src/StdAssertions.sol#L366)\n\t\t- [_failed = true](lib/forge-std/lib/ds-test/src/test.sol#L75)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdAssertions.sol"
                },
                "region": {
                  "startLine": 344,
                  "endLine": 375
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0ff960fc1ba8683a127b3254191991813e87965f4b848f340bb1a54f60c1ea1b"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in TestBasicProxy.testProxy() (test/BasicCheck.t.sol#17-25):\n\tExternal calls:\n\t- SimpleStore(address(proxy)).set(RandomStringOfLogic) (test/BasicCheck.t.sol#18)\n\t- assertEq(SimpleStore(address(proxy)).get(),RandomStringOfLogic) (test/BasicCheck.t.sol#19)\n\t\t- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)\n\tState variables written after the call(s):\n\t- assertEq(SimpleStore(address(proxy)).get(),RandomStringOfLogic) (test/BasicCheck.t.sol#19)\n\t\t- _failed = true (lib/forge-std/lib/ds-test/src/test.sol#75)\n",
            "markdown": "Reentrancy in [TestBasicProxy.testProxy()](test/BasicCheck.t.sol#L17-L25):\n\tExternal calls:\n\t- [SimpleStore(address(proxy)).set(RandomStringOfLogic)](test/BasicCheck.t.sol#L18)\n\t- [assertEq(SimpleStore(address(proxy)).get(),RandomStringOfLogic)](test/BasicCheck.t.sol#L19)\n\t\t- [(status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01)))))](lib/forge-std/lib/ds-test/src/test.sol#L67-L72)\n\tState variables written after the call(s):\n\t- [assertEq(SimpleStore(address(proxy)).get(),RandomStringOfLogic)](test/BasicCheck.t.sol#L19)\n\t\t- [_failed = true](lib/forge-std/lib/ds-test/src/test.sol#L75)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/BasicCheck.t.sol"
                },
                "region": {
                  "startLine": 17,
                  "endLine": 25
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "40bc672fa5a0a5372745ebaaf092f376e4b063e42e00cf6786e0f603d27323b3"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in DSTest.fail() (lib/forge-std/lib/ds-test/src/test.sol#65-76):\n\tExternal calls:\n\t- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)\n\tState variables written after the call(s):\n\t- _failed = true (lib/forge-std/lib/ds-test/src/test.sol#75)\n",
            "markdown": "Reentrancy in [DSTest.fail()](lib/forge-std/lib/ds-test/src/test.sol#L65-L76):\n\tExternal calls:\n\t- [(status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01)))))](lib/forge-std/lib/ds-test/src/test.sol#L67-L72)\n\tState variables written after the call(s):\n\t- [_failed = true](lib/forge-std/lib/ds-test/src/test.sol#L75)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/lib/ds-test/src/test.sol"
                },
                "region": {
                  "startLine": 65,
                  "endLine": 76
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "43fbc95edee232e583972ac4c4e2a8e5a826ca3090f5b3eb2f384a93b2e7bb74"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in StdAssertions.assertEqCall(address,bytes,address,bytes,bool) (lib/forge-std/src/StdAssertions.sol#344-375):\n\tExternal calls:\n\t- (successA,returnDataA) = address(targetA).call(callDataA) (lib/forge-std/src/StdAssertions.sol#351)\n\t- (successB,returnDataB) = address(targetB).call(callDataB) (lib/forge-std/src/StdAssertions.sol#352)\n\t- assertEq(returnDataA,returnDataB,Call return data does not match) (lib/forge-std/src/StdAssertions.sol#355)\n\t\t- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)\n\t- assertEq(returnDataA,returnDataB,Call revert data does not match) (lib/forge-std/src/StdAssertions.sol#359)\n\t\t- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)\n\t- fail() (lib/forge-std/src/StdAssertions.sol#366)\n\t\t- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)\n\t- fail() (lib/forge-std/src/StdAssertions.sol#373)\n\t\t- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)\n\tState variables written after the call(s):\n\t- fail() (lib/forge-std/src/StdAssertions.sol#373)\n\t\t- _failed = true (lib/forge-std/lib/ds-test/src/test.sol#75)\n",
            "markdown": "Reentrancy in [StdAssertions.assertEqCall(address,bytes,address,bytes,bool)](lib/forge-std/src/StdAssertions.sol#L344-L375):\n\tExternal calls:\n\t- [(successA,returnDataA) = address(targetA).call(callDataA)](lib/forge-std/src/StdAssertions.sol#L351)\n\t- [(successB,returnDataB) = address(targetB).call(callDataB)](lib/forge-std/src/StdAssertions.sol#L352)\n\t- [assertEq(returnDataA,returnDataB,Call return data does not match)](lib/forge-std/src/StdAssertions.sol#L355)\n\t\t- [(status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01)))))](lib/forge-std/lib/ds-test/src/test.sol#L67-L72)\n\t- [assertEq(returnDataA,returnDataB,Call revert data does not match)](lib/forge-std/src/StdAssertions.sol#L359)\n\t\t- [(status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01)))))](lib/forge-std/lib/ds-test/src/test.sol#L67-L72)\n\t- [fail()](lib/forge-std/src/StdAssertions.sol#L366)\n\t\t- [(status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01)))))](lib/forge-std/lib/ds-test/src/test.sol#L67-L72)\n\t- [fail()](lib/forge-std/src/StdAssertions.sol#L373)\n\t\t- [(status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01)))))](lib/forge-std/lib/ds-test/src/test.sol#L67-L72)\n\tState variables written after the call(s):\n\t- [fail()](lib/forge-std/src/StdAssertions.sol#L373)\n\t\t- [_failed = true](lib/forge-std/lib/ds-test/src/test.sol#L75)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdAssertions.sol"
                },
                "region": {
                  "startLine": 344,
                  "endLine": 375
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8203ea0e422cdef8b686240cf73c5f46771a9284c66e6da1cdc4f97b44fd2af7"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in StdAssertions.assertEqCall(address,bytes,address,bytes,bool) (lib/forge-std/src/StdAssertions.sol#344-375):\n\tExternal calls:\n\t- (successA,returnDataA) = address(targetA).call(callDataA) (lib/forge-std/src/StdAssertions.sol#351)\n\t- (successB,returnDataB) = address(targetB).call(callDataB) (lib/forge-std/src/StdAssertions.sol#352)\n\t- assertEq(returnDataA,returnDataB,Call return data does not match) (lib/forge-std/src/StdAssertions.sol#355)\n\t\t- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)\n\tState variables written after the call(s):\n\t- assertEq(returnDataA,returnDataB,Call return data does not match) (lib/forge-std/src/StdAssertions.sol#355)\n\t\t- _failed = true (lib/forge-std/lib/ds-test/src/test.sol#75)\n",
            "markdown": "Reentrancy in [StdAssertions.assertEqCall(address,bytes,address,bytes,bool)](lib/forge-std/src/StdAssertions.sol#L344-L375):\n\tExternal calls:\n\t- [(successA,returnDataA) = address(targetA).call(callDataA)](lib/forge-std/src/StdAssertions.sol#L351)\n\t- [(successB,returnDataB) = address(targetB).call(callDataB)](lib/forge-std/src/StdAssertions.sol#L352)\n\t- [assertEq(returnDataA,returnDataB,Call return data does not match)](lib/forge-std/src/StdAssertions.sol#L355)\n\t\t- [(status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01)))))](lib/forge-std/lib/ds-test/src/test.sol#L67-L72)\n\tState variables written after the call(s):\n\t- [assertEq(returnDataA,returnDataB,Call return data does not match)](lib/forge-std/src/StdAssertions.sol#L355)\n\t\t- [_failed = true](lib/forge-std/lib/ds-test/src/test.sol#L75)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdAssertions.sol"
                },
                "region": {
                  "startLine": 344,
                  "endLine": 375
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8e8055a9ab2cb4b6320c58411189e9b6b04fb83e5dd93de330265ffaf836915f"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in StdAssertions.assertEqCall(address,bytes,address,bytes,bool) (lib/forge-std/src/StdAssertions.sol#344-375):\n\tExternal calls:\n\t- (successA,returnDataA) = address(targetA).call(callDataA) (lib/forge-std/src/StdAssertions.sol#351)\n\t- (successB,returnDataB) = address(targetB).call(callDataB) (lib/forge-std/src/StdAssertions.sol#352)\n\t- assertEq(returnDataA,returnDataB,Call return data does not match) (lib/forge-std/src/StdAssertions.sol#355)\n\t\t- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)\n\t- assertEq(returnDataA,returnDataB,Call revert data does not match) (lib/forge-std/src/StdAssertions.sol#359)\n\t\t- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)\n\tState variables written after the call(s):\n\t- assertEq(returnDataA,returnDataB,Call revert data does not match) (lib/forge-std/src/StdAssertions.sol#359)\n\t\t- _failed = true (lib/forge-std/lib/ds-test/src/test.sol#75)\n",
            "markdown": "Reentrancy in [StdAssertions.assertEqCall(address,bytes,address,bytes,bool)](lib/forge-std/src/StdAssertions.sol#L344-L375):\n\tExternal calls:\n\t- [(successA,returnDataA) = address(targetA).call(callDataA)](lib/forge-std/src/StdAssertions.sol#L351)\n\t- [(successB,returnDataB) = address(targetB).call(callDataB)](lib/forge-std/src/StdAssertions.sol#L352)\n\t- [assertEq(returnDataA,returnDataB,Call return data does not match)](lib/forge-std/src/StdAssertions.sol#L355)\n\t\t- [(status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01)))))](lib/forge-std/lib/ds-test/src/test.sol#L67-L72)\n\t- [assertEq(returnDataA,returnDataB,Call revert data does not match)](lib/forge-std/src/StdAssertions.sol#L359)\n\t\t- [(status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01)))))](lib/forge-std/lib/ds-test/src/test.sol#L67-L72)\n\tState variables written after the call(s):\n\t- [assertEq(returnDataA,returnDataB,Call revert data does not match)](lib/forge-std/src/StdAssertions.sol#L359)\n\t\t- [_failed = true](lib/forge-std/lib/ds-test/src/test.sol#L75)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdAssertions.sol"
                },
                "region": {
                  "startLine": 344,
                  "endLine": 375
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a76dddd49b18f5204fc971f45103ac9771eefbdf052cf910bcfae72058dc500d"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in TestBasicProxy.testProxy() (test/BasicCheck.t.sol#17-25):\n\tExternal calls:\n\t- SimpleStore(address(proxy)).set(RandomStringOfLogic) (test/BasicCheck.t.sol#18)\n\t- assertEq(SimpleStore(address(proxy)).get(),RandomStringOfLogic) (test/BasicCheck.t.sol#19)\n\t\t- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)\n\t- SimpleStore(address(proxy)).set(AnotherRandomStringOfLogic) (test/BasicCheck.t.sol#21)\n\t- assertEq(SimpleStore(address(proxy)).get(),AnotherRandomStringOfLogic) (test/BasicCheck.t.sol#22)\n\t\t- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)\n\tState variables written after the call(s):\n\t- assertEq(SimpleStore(address(proxy)).get(),AnotherRandomStringOfLogic) (test/BasicCheck.t.sol#22)\n\t\t- _failed = true (lib/forge-std/lib/ds-test/src/test.sol#75)\n",
            "markdown": "Reentrancy in [TestBasicProxy.testProxy()](test/BasicCheck.t.sol#L17-L25):\n\tExternal calls:\n\t- [SimpleStore(address(proxy)).set(RandomStringOfLogic)](test/BasicCheck.t.sol#L18)\n\t- [assertEq(SimpleStore(address(proxy)).get(),RandomStringOfLogic)](test/BasicCheck.t.sol#L19)\n\t\t- [(status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01)))))](lib/forge-std/lib/ds-test/src/test.sol#L67-L72)\n\t- [SimpleStore(address(proxy)).set(AnotherRandomStringOfLogic)](test/BasicCheck.t.sol#L21)\n\t- [assertEq(SimpleStore(address(proxy)).get(),AnotherRandomStringOfLogic)](test/BasicCheck.t.sol#L22)\n\t\t- [(status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01)))))](lib/forge-std/lib/ds-test/src/test.sol#L67-L72)\n\tState variables written after the call(s):\n\t- [assertEq(SimpleStore(address(proxy)).get(),AnotherRandomStringOfLogic)](test/BasicCheck.t.sol#L22)\n\t\t- [_failed = true](lib/forge-std/lib/ds-test/src/test.sol#L75)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/BasicCheck.t.sol"
                },
                "region": {
                  "startLine": 17,
                  "endLine": 25
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ac895f32df40ee0f949fdddd5f88c32a9052ff95e72583a795d3c1b357dbbb1e"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in TestBasicProxy.testProxy() (test/BasicCheck.t.sol#17-25):\n\tExternal calls:\n\t- SimpleStore(address(proxy)).set(RandomStringOfLogic) (test/BasicCheck.t.sol#18)\n\t- assertEq(SimpleStore(address(proxy)).get(),RandomStringOfLogic) (test/BasicCheck.t.sol#19)\n\t\t- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)\n\t- SimpleStore(address(proxy)).set(AnotherRandomStringOfLogic) (test/BasicCheck.t.sol#21)\n\t- assertEq(SimpleStore(address(proxy)).get(),AnotherRandomStringOfLogic) (test/BasicCheck.t.sol#22)\n\t\t- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)\n\t- assertEq(store.get(),InitialValue) (test/BasicCheck.t.sol#24)\n\t\t- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)\n\tState variables written after the call(s):\n\t- assertEq(store.get(),InitialValue) (test/BasicCheck.t.sol#24)\n\t\t- _failed = true (lib/forge-std/lib/ds-test/src/test.sol#75)\n",
            "markdown": "Reentrancy in [TestBasicProxy.testProxy()](test/BasicCheck.t.sol#L17-L25):\n\tExternal calls:\n\t- [SimpleStore(address(proxy)).set(RandomStringOfLogic)](test/BasicCheck.t.sol#L18)\n\t- [assertEq(SimpleStore(address(proxy)).get(),RandomStringOfLogic)](test/BasicCheck.t.sol#L19)\n\t\t- [(status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01)))))](lib/forge-std/lib/ds-test/src/test.sol#L67-L72)\n\t- [SimpleStore(address(proxy)).set(AnotherRandomStringOfLogic)](test/BasicCheck.t.sol#L21)\n\t- [assertEq(SimpleStore(address(proxy)).get(),AnotherRandomStringOfLogic)](test/BasicCheck.t.sol#L22)\n\t\t- [(status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01)))))](lib/forge-std/lib/ds-test/src/test.sol#L67-L72)\n\t- [assertEq(store.get(),InitialValue)](test/BasicCheck.t.sol#L24)\n\t\t- [(status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01)))))](lib/forge-std/lib/ds-test/src/test.sol#L67-L72)\n\tState variables written after the call(s):\n\t- [assertEq(store.get(),InitialValue)](test/BasicCheck.t.sol#L24)\n\t\t- [_failed = true](lib/forge-std/lib/ds-test/src/test.sol#L75)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/BasicCheck.t.sol"
                },
                "region": {
                  "startLine": 17,
                  "endLine": 25
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "af51362debea79d9c1de8a991f02e229c2feaaebe0d8fb758a6a7b7b2b78d486"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in stdStorageSafe.find(StdStorage) (lib/forge-std/src/StdStorage.sol#32-105):\n\tExternal calls:\n\t- vm.record() (lib/forge-std/src/StdStorage.sol#43)\n\t- (reads) = vm.accesses(address(who)) (lib/forge-std/src/StdStorage.sol#50)\n\tEvent emitted after the call(s):\n\t- SlotFound(who,fsig,keccak256(bytes)(abi.encodePacked(ins,field_depth)),uint256(reads[0])) (lib/forge-std/src/StdStorage.sol#62)\n\t- WARNING_UninitedSlot(who,uint256(reads[0])) (lib/forge-std/src/StdStorage.sol#54)\n",
            "markdown": "Reentrancy in [stdStorageSafe.find(StdStorage)](lib/forge-std/src/StdStorage.sol#L32-L105):\n\tExternal calls:\n\t- [vm.record()](lib/forge-std/src/StdStorage.sol#L43)\n\t- [(reads) = vm.accesses(address(who))](lib/forge-std/src/StdStorage.sol#L50)\n\tEvent emitted after the call(s):\n\t- [SlotFound(who,fsig,keccak256(bytes)(abi.encodePacked(ins,field_depth)),uint256(reads[0]))](lib/forge-std/src/StdStorage.sol#L62)\n\t- [WARNING_UninitedSlot(who,uint256(reads[0]))](lib/forge-std/src/StdStorage.sol#L54)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStorage.sol"
                },
                "region": {
                  "startLine": 32,
                  "endLine": 105
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "030f068795e7518541bdd407af3fa5b66b5888716fb89e9a03f8e719f153de11"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in stdStorageSafe.find(StdStorage) (lib/forge-std/src/StdStorage.sol#32-105):\n\tExternal calls:\n\t- vm.record() (lib/forge-std/src/StdStorage.sol#43)\n\t- (reads) = vm.accesses(address(who)) (lib/forge-std/src/StdStorage.sol#50)\n\t- vm.store(who,reads[i],bytes32(\u00137)) (lib/forge-std/src/StdStorage.sol#72)\n\t- vm.store(who,reads[i],prev) (lib/forge-std/src/StdStorage.sol#88)\n\tEvent emitted after the call(s):\n\t- SlotFound(who,fsig,keccak256(bytes)(abi.encodePacked(ins,field_depth)),uint256(reads[i])) (lib/forge-std/src/StdStorage.sol#82)\n\t- WARNING_UninitedSlot(who,uint256(reads[i])) (lib/forge-std/src/StdStorage.sol#69)\n",
            "markdown": "Reentrancy in [stdStorageSafe.find(StdStorage)](lib/forge-std/src/StdStorage.sol#L32-L105):\n\tExternal calls:\n\t- [vm.record()](lib/forge-std/src/StdStorage.sol#L43)\n\t- [(reads) = vm.accesses(address(who))](lib/forge-std/src/StdStorage.sol#L50)\n\t- [vm.store(who,reads[i],bytes32(\u00137))](lib/forge-std/src/StdStorage.sol#L72)\n\t- [vm.store(who,reads[i],prev)](lib/forge-std/src/StdStorage.sol#L88)\n\tEvent emitted after the call(s):\n\t- [SlotFound(who,fsig,keccak256(bytes)(abi.encodePacked(ins,field_depth)),uint256(reads[i]))](lib/forge-std/src/StdStorage.sol#L82)\n\t- [WARNING_UninitedSlot(who,uint256(reads[i]))](lib/forge-std/src/StdStorage.sol#L69)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStorage.sol"
                },
                "region": {
                  "startLine": 32,
                  "endLine": 105
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2145616e82d514bdd533b79baace867a0dde92133e174a8817b11bf2f6a2a559"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in TestBasicProxy.testProxy() (test/BasicCheck.t.sol#17-25):\n\tExternal calls:\n\t- SimpleStore(address(proxy)).set(RandomStringOfLogic) (test/BasicCheck.t.sol#18)\n\t- assertEq(SimpleStore(address(proxy)).get(),RandomStringOfLogic) (test/BasicCheck.t.sol#19)\n\t\t- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)\n\tEvent emitted after the call(s):\n\t- log(Error: a == b not satisfied [string]) (lib/forge-std/lib/ds-test/src/test.sol#523)\n\t\t- assertEq(SimpleStore(address(proxy)).get(),RandomStringOfLogic) (test/BasicCheck.t.sol#19)\n\t- log_named_string(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#524)\n\t\t- assertEq(SimpleStore(address(proxy)).get(),RandomStringOfLogic) (test/BasicCheck.t.sol#19)\n\t- log_named_string(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#525)\n\t\t- assertEq(SimpleStore(address(proxy)).get(),RandomStringOfLogic) (test/BasicCheck.t.sol#19)\n",
            "markdown": "Reentrancy in [TestBasicProxy.testProxy()](test/BasicCheck.t.sol#L17-L25):\n\tExternal calls:\n\t- [SimpleStore(address(proxy)).set(RandomStringOfLogic)](test/BasicCheck.t.sol#L18)\n\t- [assertEq(SimpleStore(address(proxy)).get(),RandomStringOfLogic)](test/BasicCheck.t.sol#L19)\n\t\t- [(status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01)))))](lib/forge-std/lib/ds-test/src/test.sol#L67-L72)\n\tEvent emitted after the call(s):\n\t- [log(Error: a == b not satisfied [string])](lib/forge-std/lib/ds-test/src/test.sol#L523)\n\t\t- [assertEq(SimpleStore(address(proxy)).get(),RandomStringOfLogic)](test/BasicCheck.t.sol#L19)\n\t- [log_named_string(      Left,a)](lib/forge-std/lib/ds-test/src/test.sol#L524)\n\t\t- [assertEq(SimpleStore(address(proxy)).get(),RandomStringOfLogic)](test/BasicCheck.t.sol#L19)\n\t- [log_named_string(     Right,b)](lib/forge-std/lib/ds-test/src/test.sol#L525)\n\t\t- [assertEq(SimpleStore(address(proxy)).get(),RandomStringOfLogic)](test/BasicCheck.t.sol#L19)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/BasicCheck.t.sol"
                },
                "region": {
                  "startLine": 17,
                  "endLine": 25
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "50e76f14ca2ccad8b31e59becc04e7e54cb99a260ef9b803767979f79a77a724"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in StdAssertions.assertEqCall(address,bytes,address,bytes,bool) (lib/forge-std/src/StdAssertions.sol#344-375):\n\tExternal calls:\n\t- (successA,returnDataA) = address(targetA).call(callDataA) (lib/forge-std/src/StdAssertions.sol#351)\n\t- (successB,returnDataB) = address(targetB).call(callDataB) (lib/forge-std/src/StdAssertions.sol#352)\n\t- assertEq(returnDataA,returnDataB,Call return data does not match) (lib/forge-std/src/StdAssertions.sol#355)\n\t\t- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)\n\t- assertEq(returnDataA,returnDataB,Call revert data does not match) (lib/forge-std/src/StdAssertions.sol#359)\n\t\t- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)\n\tEvent emitted after the call(s):\n\t- log(Error: a == b not satisfied [bytes]) (lib/forge-std/lib/ds-test/src/test.sol#565)\n\t\t- assertEq(returnDataA,returnDataB,Call revert data does not match) (lib/forge-std/src/StdAssertions.sol#359)\n\t- log(Error: Calls were not equal) (lib/forge-std/src/StdAssertions.sol#363)\n\t- log_named_bytes(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#566)\n\t\t- assertEq(returnDataA,returnDataB,Call revert data does not match) (lib/forge-std/src/StdAssertions.sol#359)\n\t- log_named_bytes(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#567)\n\t\t- assertEq(returnDataA,returnDataB,Call revert data does not match) (lib/forge-std/src/StdAssertions.sol#359)\n\t- log_named_bytes(  Left call revert data,returnDataA) (lib/forge-std/src/StdAssertions.sol#364)\n\t- log_named_bytes( Right call return data,returnDataB) (lib/forge-std/src/StdAssertions.sol#365)\n\t- log_named_string(Error,err) (lib/forge-std/lib/ds-test/src/test.sol#573)\n\t\t- assertEq(returnDataA,returnDataB,Call revert data does not match) (lib/forge-std/src/StdAssertions.sol#359)\n",
            "markdown": "Reentrancy in [StdAssertions.assertEqCall(address,bytes,address,bytes,bool)](lib/forge-std/src/StdAssertions.sol#L344-L375):\n\tExternal calls:\n\t- [(successA,returnDataA) = address(targetA).call(callDataA)](lib/forge-std/src/StdAssertions.sol#L351)\n\t- [(successB,returnDataB) = address(targetB).call(callDataB)](lib/forge-std/src/StdAssertions.sol#L352)\n\t- [assertEq(returnDataA,returnDataB,Call return data does not match)](lib/forge-std/src/StdAssertions.sol#L355)\n\t\t- [(status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01)))))](lib/forge-std/lib/ds-test/src/test.sol#L67-L72)\n\t- [assertEq(returnDataA,returnDataB,Call revert data does not match)](lib/forge-std/src/StdAssertions.sol#L359)\n\t\t- [(status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01)))))](lib/forge-std/lib/ds-test/src/test.sol#L67-L72)\n\tEvent emitted after the call(s):\n\t- [log(Error: a == b not satisfied [bytes])](lib/forge-std/lib/ds-test/src/test.sol#L565)\n\t\t- [assertEq(returnDataA,returnDataB,Call revert data does not match)](lib/forge-std/src/StdAssertions.sol#L359)\n\t- [log(Error: Calls were not equal)](lib/forge-std/src/StdAssertions.sol#L363)\n\t- [log_named_bytes(      Left,a)](lib/forge-std/lib/ds-test/src/test.sol#L566)\n\t\t- [assertEq(returnDataA,returnDataB,Call revert data does not match)](lib/forge-std/src/StdAssertions.sol#L359)\n\t- [log_named_bytes(     Right,b)](lib/forge-std/lib/ds-test/src/test.sol#L567)\n\t\t- [assertEq(returnDataA,returnDataB,Call revert data does not match)](lib/forge-std/src/StdAssertions.sol#L359)\n\t- [log_named_bytes(  Left call revert data,returnDataA)](lib/forge-std/src/StdAssertions.sol#L364)\n\t- [log_named_bytes( Right call return data,returnDataB)](lib/forge-std/src/StdAssertions.sol#L365)\n\t- [log_named_string(Error,err)](lib/forge-std/lib/ds-test/src/test.sol#L573)\n\t\t- [assertEq(returnDataA,returnDataB,Call revert data does not match)](lib/forge-std/src/StdAssertions.sol#L359)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdAssertions.sol"
                },
                "region": {
                  "startLine": 344,
                  "endLine": 375
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7beaeaea0390a3aa36338609639b59814f2cf4607a697a4aeebf8361a68d7dea"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in TestBasicProxy.testProxy() (test/BasicCheck.t.sol#17-25):\n\tExternal calls:\n\t- SimpleStore(address(proxy)).set(RandomStringOfLogic) (test/BasicCheck.t.sol#18)\n\t- assertEq(SimpleStore(address(proxy)).get(),RandomStringOfLogic) (test/BasicCheck.t.sol#19)\n\t\t- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)\n\t- SimpleStore(address(proxy)).set(AnotherRandomStringOfLogic) (test/BasicCheck.t.sol#21)\n\t- assertEq(SimpleStore(address(proxy)).get(),AnotherRandomStringOfLogic) (test/BasicCheck.t.sol#22)\n\t\t- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)\n\t- assertEq(store.get(),InitialValue) (test/BasicCheck.t.sol#24)\n\t\t- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)\n\tEvent emitted after the call(s):\n\t- log(Error: a == b not satisfied [string]) (lib/forge-std/lib/ds-test/src/test.sol#523)\n\t\t- assertEq(store.get(),InitialValue) (test/BasicCheck.t.sol#24)\n\t- log_named_string(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#524)\n\t\t- assertEq(store.get(),InitialValue) (test/BasicCheck.t.sol#24)\n\t- log_named_string(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#525)\n\t\t- assertEq(store.get(),InitialValue) (test/BasicCheck.t.sol#24)\n",
            "markdown": "Reentrancy in [TestBasicProxy.testProxy()](test/BasicCheck.t.sol#L17-L25):\n\tExternal calls:\n\t- [SimpleStore(address(proxy)).set(RandomStringOfLogic)](test/BasicCheck.t.sol#L18)\n\t- [assertEq(SimpleStore(address(proxy)).get(),RandomStringOfLogic)](test/BasicCheck.t.sol#L19)\n\t\t- [(status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01)))))](lib/forge-std/lib/ds-test/src/test.sol#L67-L72)\n\t- [SimpleStore(address(proxy)).set(AnotherRandomStringOfLogic)](test/BasicCheck.t.sol#L21)\n\t- [assertEq(SimpleStore(address(proxy)).get(),AnotherRandomStringOfLogic)](test/BasicCheck.t.sol#L22)\n\t\t- [(status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01)))))](lib/forge-std/lib/ds-test/src/test.sol#L67-L72)\n\t- [assertEq(store.get(),InitialValue)](test/BasicCheck.t.sol#L24)\n\t\t- [(status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01)))))](lib/forge-std/lib/ds-test/src/test.sol#L67-L72)\n\tEvent emitted after the call(s):\n\t- [log(Error: a == b not satisfied [string])](lib/forge-std/lib/ds-test/src/test.sol#L523)\n\t\t- [assertEq(store.get(),InitialValue)](test/BasicCheck.t.sol#L24)\n\t- [log_named_string(      Left,a)](lib/forge-std/lib/ds-test/src/test.sol#L524)\n\t\t- [assertEq(store.get(),InitialValue)](test/BasicCheck.t.sol#L24)\n\t- [log_named_string(     Right,b)](lib/forge-std/lib/ds-test/src/test.sol#L525)\n\t\t- [assertEq(store.get(),InitialValue)](test/BasicCheck.t.sol#L24)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/BasicCheck.t.sol"
                },
                "region": {
                  "startLine": 17,
                  "endLine": 25
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "89ee4c95918f32f4343054ed1388887c2d7e5f0cda0dea5e32c8ced59c1de216"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in TestBasicProxy.testProxy() (test/BasicCheck.t.sol#17-25):\n\tExternal calls:\n\t- SimpleStore(address(proxy)).set(RandomStringOfLogic) (test/BasicCheck.t.sol#18)\n\t- assertEq(SimpleStore(address(proxy)).get(),RandomStringOfLogic) (test/BasicCheck.t.sol#19)\n\t\t- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)\n\t- SimpleStore(address(proxy)).set(AnotherRandomStringOfLogic) (test/BasicCheck.t.sol#21)\n\t- assertEq(SimpleStore(address(proxy)).get(),AnotherRandomStringOfLogic) (test/BasicCheck.t.sol#22)\n\t\t- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)\n\tEvent emitted after the call(s):\n\t- log(Error: a == b not satisfied [string]) (lib/forge-std/lib/ds-test/src/test.sol#523)\n\t\t- assertEq(SimpleStore(address(proxy)).get(),AnotherRandomStringOfLogic) (test/BasicCheck.t.sol#22)\n\t- log_named_string(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#524)\n\t\t- assertEq(SimpleStore(address(proxy)).get(),AnotherRandomStringOfLogic) (test/BasicCheck.t.sol#22)\n\t- log_named_string(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#525)\n\t\t- assertEq(SimpleStore(address(proxy)).get(),AnotherRandomStringOfLogic) (test/BasicCheck.t.sol#22)\n",
            "markdown": "Reentrancy in [TestBasicProxy.testProxy()](test/BasicCheck.t.sol#L17-L25):\n\tExternal calls:\n\t- [SimpleStore(address(proxy)).set(RandomStringOfLogic)](test/BasicCheck.t.sol#L18)\n\t- [assertEq(SimpleStore(address(proxy)).get(),RandomStringOfLogic)](test/BasicCheck.t.sol#L19)\n\t\t- [(status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01)))))](lib/forge-std/lib/ds-test/src/test.sol#L67-L72)\n\t- [SimpleStore(address(proxy)).set(AnotherRandomStringOfLogic)](test/BasicCheck.t.sol#L21)\n\t- [assertEq(SimpleStore(address(proxy)).get(),AnotherRandomStringOfLogic)](test/BasicCheck.t.sol#L22)\n\t\t- [(status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01)))))](lib/forge-std/lib/ds-test/src/test.sol#L67-L72)\n\tEvent emitted after the call(s):\n\t- [log(Error: a == b not satisfied [string])](lib/forge-std/lib/ds-test/src/test.sol#L523)\n\t\t- [assertEq(SimpleStore(address(proxy)).get(),AnotherRandomStringOfLogic)](test/BasicCheck.t.sol#L22)\n\t- [log_named_string(      Left,a)](lib/forge-std/lib/ds-test/src/test.sol#L524)\n\t\t- [assertEq(SimpleStore(address(proxy)).get(),AnotherRandomStringOfLogic)](test/BasicCheck.t.sol#L22)\n\t- [log_named_string(     Right,b)](lib/forge-std/lib/ds-test/src/test.sol#L525)\n\t\t- [assertEq(SimpleStore(address(proxy)).get(),AnotherRandomStringOfLogic)](test/BasicCheck.t.sol#L22)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/BasicCheck.t.sol"
                },
                "region": {
                  "startLine": 17,
                  "endLine": 25
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8ef9cc78e81c04d04da7ff3298b9ab1d6bacdfef147df73e06f91906bc1c91b5"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in StdAssertions.assertEqCall(address,bytes,address,bytes,bool) (lib/forge-std/src/StdAssertions.sol#344-375):\n\tExternal calls:\n\t- (successA,returnDataA) = address(targetA).call(callDataA) (lib/forge-std/src/StdAssertions.sol#351)\n\t- (successB,returnDataB) = address(targetB).call(callDataB) (lib/forge-std/src/StdAssertions.sol#352)\n\t- assertEq(returnDataA,returnDataB,Call return data does not match) (lib/forge-std/src/StdAssertions.sol#355)\n\t\t- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)\n\t- assertEq(returnDataA,returnDataB,Call revert data does not match) (lib/forge-std/src/StdAssertions.sol#359)\n\t\t- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)\n\t- fail() (lib/forge-std/src/StdAssertions.sol#366)\n\t\t- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)\n\tEvent emitted after the call(s):\n\t- log(Error: Calls were not equal) (lib/forge-std/src/StdAssertions.sol#370)\n\t- log_named_bytes(  Left call return data,returnDataA) (lib/forge-std/src/StdAssertions.sol#371)\n\t- log_named_bytes( Right call revert data,returnDataB) (lib/forge-std/src/StdAssertions.sol#372)\n",
            "markdown": "Reentrancy in [StdAssertions.assertEqCall(address,bytes,address,bytes,bool)](lib/forge-std/src/StdAssertions.sol#L344-L375):\n\tExternal calls:\n\t- [(successA,returnDataA) = address(targetA).call(callDataA)](lib/forge-std/src/StdAssertions.sol#L351)\n\t- [(successB,returnDataB) = address(targetB).call(callDataB)](lib/forge-std/src/StdAssertions.sol#L352)\n\t- [assertEq(returnDataA,returnDataB,Call return data does not match)](lib/forge-std/src/StdAssertions.sol#L355)\n\t\t- [(status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01)))))](lib/forge-std/lib/ds-test/src/test.sol#L67-L72)\n\t- [assertEq(returnDataA,returnDataB,Call revert data does not match)](lib/forge-std/src/StdAssertions.sol#L359)\n\t\t- [(status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01)))))](lib/forge-std/lib/ds-test/src/test.sol#L67-L72)\n\t- [fail()](lib/forge-std/src/StdAssertions.sol#L366)\n\t\t- [(status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01)))))](lib/forge-std/lib/ds-test/src/test.sol#L67-L72)\n\tEvent emitted after the call(s):\n\t- [log(Error: Calls were not equal)](lib/forge-std/src/StdAssertions.sol#L370)\n\t- [log_named_bytes(  Left call return data,returnDataA)](lib/forge-std/src/StdAssertions.sol#L371)\n\t- [log_named_bytes( Right call revert data,returnDataB)](lib/forge-std/src/StdAssertions.sol#L372)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdAssertions.sol"
                },
                "region": {
                  "startLine": 344,
                  "endLine": 375
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a76c98f10d6d3a812d33b8ce3b7825355d12d150fa1918bba502f171bab6c861"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in StdAssertions.assertEqCall(address,bytes,address,bytes,bool) (lib/forge-std/src/StdAssertions.sol#344-375):\n\tExternal calls:\n\t- (successA,returnDataA) = address(targetA).call(callDataA) (lib/forge-std/src/StdAssertions.sol#351)\n\t- (successB,returnDataB) = address(targetB).call(callDataB) (lib/forge-std/src/StdAssertions.sol#352)\n\t- assertEq(returnDataA,returnDataB,Call return data does not match) (lib/forge-std/src/StdAssertions.sol#355)\n\t\t- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)\n\tEvent emitted after the call(s):\n\t- log(Error: a == b not satisfied [bytes]) (lib/forge-std/lib/ds-test/src/test.sol#565)\n\t\t- assertEq(returnDataA,returnDataB,Call return data does not match) (lib/forge-std/src/StdAssertions.sol#355)\n\t- log_named_bytes(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#566)\n\t\t- assertEq(returnDataA,returnDataB,Call return data does not match) (lib/forge-std/src/StdAssertions.sol#355)\n\t- log_named_bytes(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#567)\n\t\t- assertEq(returnDataA,returnDataB,Call return data does not match) (lib/forge-std/src/StdAssertions.sol#355)\n\t- log_named_string(Error,err) (lib/forge-std/lib/ds-test/src/test.sol#573)\n\t\t- assertEq(returnDataA,returnDataB,Call return data does not match) (lib/forge-std/src/StdAssertions.sol#355)\n",
            "markdown": "Reentrancy in [StdAssertions.assertEqCall(address,bytes,address,bytes,bool)](lib/forge-std/src/StdAssertions.sol#L344-L375):\n\tExternal calls:\n\t- [(successA,returnDataA) = address(targetA).call(callDataA)](lib/forge-std/src/StdAssertions.sol#L351)\n\t- [(successB,returnDataB) = address(targetB).call(callDataB)](lib/forge-std/src/StdAssertions.sol#L352)\n\t- [assertEq(returnDataA,returnDataB,Call return data does not match)](lib/forge-std/src/StdAssertions.sol#L355)\n\t\t- [(status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01)))))](lib/forge-std/lib/ds-test/src/test.sol#L67-L72)\n\tEvent emitted after the call(s):\n\t- [log(Error: a == b not satisfied [bytes])](lib/forge-std/lib/ds-test/src/test.sol#L565)\n\t\t- [assertEq(returnDataA,returnDataB,Call return data does not match)](lib/forge-std/src/StdAssertions.sol#L355)\n\t- [log_named_bytes(      Left,a)](lib/forge-std/lib/ds-test/src/test.sol#L566)\n\t\t- [assertEq(returnDataA,returnDataB,Call return data does not match)](lib/forge-std/src/StdAssertions.sol#L355)\n\t- [log_named_bytes(     Right,b)](lib/forge-std/lib/ds-test/src/test.sol#L567)\n\t\t- [assertEq(returnDataA,returnDataB,Call return data does not match)](lib/forge-std/src/StdAssertions.sol#L355)\n\t- [log_named_string(Error,err)](lib/forge-std/lib/ds-test/src/test.sol#L573)\n\t\t- [assertEq(returnDataA,returnDataB,Call return data does not match)](lib/forge-std/src/StdAssertions.sol#L355)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdAssertions.sol"
                },
                "region": {
                  "startLine": 344,
                  "endLine": 375
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fff494fa7c70b1300bc55124d6878139b034775d0ecbf8d215b39eac829db95a"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "StdCheatsSafe.deployCode(string) (lib/forge-std/src/StdCheats.sol#398-406) uses assembly\n\t- INLINE ASM (lib/forge-std/src/StdCheats.sol#401-403)\n",
            "markdown": "[StdCheatsSafe.deployCode(string)](lib/forge-std/src/StdCheats.sol#L398-L406) uses assembly\n\t- [INLINE ASM](lib/forge-std/src/StdCheats.sol#L401-L403)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdCheats.sol"
                },
                "region": {
                  "startLine": 398,
                  "endLine": 406
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0573d727932b7979c0d1c5aae81bb82484d11da0d9b6c847f0c8baf28b51580d"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Proxy._delegate(address) (src/Proxy.sol#22-45) uses assembly\n\t- INLINE ASM (src/Proxy.sol#23-44)\n",
            "markdown": "[Proxy._delegate(address)](src/Proxy.sol#L22-L45) uses assembly\n\t- [INLINE ASM](src/Proxy.sol#L23-L44)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Proxy.sol"
                },
                "region": {
                  "startLine": 22,
                  "endLine": 45
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "158f1f6a12d0c5cc8e85b76fce5efa36534093dc2eac576fbaf68bc7c9064896"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "StdCheatsSafe.deployCode(string,bytes,uint256) (lib/forge-std/src/StdCheats.sol#409-417) uses assembly\n\t- INLINE ASM (lib/forge-std/src/StdCheats.sol#412-414)\n",
            "markdown": "[StdCheatsSafe.deployCode(string,bytes,uint256)](lib/forge-std/src/StdCheats.sol#L409-L417) uses assembly\n\t- [INLINE ASM](lib/forge-std/src/StdCheats.sol#L412-L414)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdCheats.sol"
                },
                "region": {
                  "startLine": 409,
                  "endLine": 417
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1b478823b2e6989b8a4ad4332b56ad24aa75c285c7800119521c7ea069a431df"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "StorageSlot.getStringSlot(bytes32) (src/libraries/StorageSlot.sol#102-107) uses assembly\n\t- INLINE ASM (src/libraries/StorageSlot.sol#104-106)\n",
            "markdown": "[StorageSlot.getStringSlot(bytes32)](src/libraries/StorageSlot.sol#L102-L107) uses assembly\n\t- [INLINE ASM](src/libraries/StorageSlot.sol#L104-L106)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/libraries/StorageSlot.sol"
                },
                "region": {
                  "startLine": 102,
                  "endLine": 107
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1f3c6e4951e1b2fb495073334f9b6c9b26aac9e4bb8e27f376729828fe47aab9"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "DSTest.hasHEVMContext() (lib/forge-std/lib/ds-test/src/test.sol#78-84) uses assembly\n\t- INLINE ASM (lib/forge-std/lib/ds-test/src/test.sol#80-82)\n",
            "markdown": "[DSTest.hasHEVMContext()](lib/forge-std/lib/ds-test/src/test.sol#L78-L84) uses assembly\n\t- [INLINE ASM](lib/forge-std/lib/ds-test/src/test.sol#L80-L82)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/lib/ds-test/src/test.sol"
                },
                "region": {
                  "startLine": 78,
                  "endLine": 84
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "281bbcea73cc1200df1c3cb22f18f52cfa9345e9701f22c9abe63cdac057280d"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "TransparentUpgradeableProxy._fallback() (src/TransparentUpgradeableProxy.sol#89-106) uses assembly\n\t- INLINE ASM (src/TransparentUpgradeableProxy.sol#100-102)\n",
            "markdown": "[TransparentUpgradeableProxy._fallback()](src/TransparentUpgradeableProxy.sol#L89-L106) uses assembly\n\t- [INLINE ASM](src/TransparentUpgradeableProxy.sol#L100-L102)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/TransparentUpgradeableProxy.sol"
                },
                "region": {
                  "startLine": 89,
                  "endLine": 106
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "291ff1e179b4b51559bf9cda23ffb9663b38f4139695ce3c84c69d5938656f5f"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "console2._sendLogPayloadView(bytes) (lib/forge-std/src/console2.sol#24-32) uses assembly\n\t- INLINE ASM (lib/forge-std/src/console2.sol#28-31)\n",
            "markdown": "[console2._sendLogPayloadView(bytes)](lib/forge-std/src/console2.sol#L24-L32) uses assembly\n\t- [INLINE ASM](lib/forge-std/src/console2.sol#L28-L31)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/console2.sol"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 32
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "299505b7b688abf6afbaf58f591be65e5690b99a3f1b4dca96c54e6f4767d28a"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "console2._castLogPayloadViewToPure(function(bytes)) (lib/forge-std/src/console2.sol#12-18) uses assembly\n\t- INLINE ASM (lib/forge-std/src/console2.sol#15-17)\n",
            "markdown": "[console2._castLogPayloadViewToPure(function(bytes))](lib/forge-std/src/console2.sol#L12-L18) uses assembly\n\t- [INLINE ASM](lib/forge-std/src/console2.sol#L15-L17)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/console2.sol"
                },
                "region": {
                  "startLine": 12,
                  "endLine": 18
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2ee453441751d6e27733e9c0f456a6eddd02f0e00f9ae01330d22313343ccea5"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Address._revert(bytes,function()) (src/libraries/Address.sol#245-258) uses assembly\n\t- INLINE ASM (src/libraries/Address.sol#250-253)\n",
            "markdown": "[Address._revert(bytes,function())](src/libraries/Address.sol#L245-L258) uses assembly\n\t- [INLINE ASM](src/libraries/Address.sol#L250-L253)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/libraries/Address.sol"
                },
                "region": {
                  "startLine": 245,
                  "endLine": 258
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "38815643828bdb01438d4180119824bc9fb83eb0b52cc7010c7eb5fcc52e9bd0"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "StdCheatsSafe.assumeNoPrecompiles(address) (lib/forge-std/src/StdCheats.sol#218-225) uses assembly\n\t- INLINE ASM (lib/forge-std/src/StdCheats.sol#221-223)\n",
            "markdown": "[StdCheatsSafe.assumeNoPrecompiles(address)](lib/forge-std/src/StdCheats.sol#L218-L225) uses assembly\n\t- [INLINE ASM](lib/forge-std/src/StdCheats.sol#L221-L223)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdCheats.sol"
                },
                "region": {
                  "startLine": 218,
                  "endLine": 225
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3f2dc1437e4b93d4658ed53ed620b8fa58e340d10ca3dde25ea1f84690eecb7c"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "StorageSlot.getBytesSlot(bytes32) (src/libraries/StorageSlot.sol#122-127) uses assembly\n\t- INLINE ASM (src/libraries/StorageSlot.sol#124-126)\n",
            "markdown": "[StorageSlot.getBytesSlot(bytes32)](src/libraries/StorageSlot.sol#L122-L127) uses assembly\n\t- [INLINE ASM](src/libraries/StorageSlot.sol#L124-L126)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/libraries/StorageSlot.sol"
                },
                "region": {
                  "startLine": 122,
                  "endLine": 127
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "444a8e7c3038af168efa8bc48b60e5d862acd045a40c455d0497972ea1a61d0b"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "StdUtils.getTokenBalances(address,address[]) (lib/forge-std/src/StdUtils.sol#150-177) uses assembly\n\t- INLINE ASM (lib/forge-std/src/StdUtils.sol#156-158)\n",
            "markdown": "[StdUtils.getTokenBalances(address,address[])](lib/forge-std/src/StdUtils.sol#L150-L177) uses assembly\n\t- [INLINE ASM](lib/forge-std/src/StdUtils.sol#L156-L158)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdUtils.sol"
                },
                "region": {
                  "startLine": 150,
                  "endLine": 177
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5041806102c6d25a9c5e18fc03f2d57ddab30f1024ce5f85a8a6393991fe4cbb"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "console._sendLogPayload(bytes) (lib/forge-std/src/console.sol#7-15) uses assembly\n\t- INLINE ASM (lib/forge-std/src/console.sol#11-14)\n",
            "markdown": "[console._sendLogPayload(bytes)](lib/forge-std/src/console.sol#L7-L15) uses assembly\n\t- [INLINE ASM](lib/forge-std/src/console.sol#L11-L14)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/console.sol"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 15
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5758c17df66f8816f5064e14ea7f15d5ee32aa62981846c608f5a746b6c72583"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "StorageSlot.getAddressSlot(bytes32) (src/libraries/StorageSlot.sol#62-67) uses assembly\n\t- INLINE ASM (src/libraries/StorageSlot.sol#64-66)\n",
            "markdown": "[StorageSlot.getAddressSlot(bytes32)](src/libraries/StorageSlot.sol#L62-L67) uses assembly\n\t- [INLINE ASM](src/libraries/StorageSlot.sol#L64-L66)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/libraries/StorageSlot.sol"
                },
                "region": {
                  "startLine": 62,
                  "endLine": 67
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5d6a29a5bb6d8889ded437df249d1a5c84484756ee9dca08b481bca4cc64173a"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "StdCheatsSafe.deployCode(string,uint256) (lib/forge-std/src/StdCheats.sol#419-427) uses assembly\n\t- INLINE ASM (lib/forge-std/src/StdCheats.sol#422-424)\n",
            "markdown": "[StdCheatsSafe.deployCode(string,uint256)](lib/forge-std/src/StdCheats.sol#L419-L427) uses assembly\n\t- [INLINE ASM](lib/forge-std/src/StdCheats.sol#L422-L424)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdCheats.sol"
                },
                "region": {
                  "startLine": 419,
                  "endLine": 427
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "76e7dbc7fb84a5588fa2af339948171fb80ce78d6a856b6c4a94ba1e4576f35f"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "stdStorage.checked_write(StdStorage,bool) (lib/forge-std/src/StdStorage.sol#242-249) uses assembly\n\t- INLINE ASM (lib/forge-std/src/StdStorage.sol#245-247)\n",
            "markdown": "[stdStorage.checked_write(StdStorage,bool)](lib/forge-std/src/StdStorage.sol#L242-L249) uses assembly\n\t- [INLINE ASM](lib/forge-std/src/StdStorage.sol#L245-L247)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStorage.sol"
                },
                "region": {
                  "startLine": 242,
                  "endLine": 249
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7bdfd2aaeceb654ff30de6ef283cd306a7034fa9f44c01b99b2b61d553bad44b"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "stdStorage.flatten(bytes32[]) (lib/forge-std/src/StdStorage.sol#315-326) uses assembly\n\t- INLINE ASM (lib/forge-std/src/StdStorage.sol#320-322)\n",
            "markdown": "[stdStorage.flatten(bytes32[])](lib/forge-std/src/StdStorage.sol#L315-L326) uses assembly\n\t- [INLINE ASM](lib/forge-std/src/StdStorage.sol#L320-L322)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStorage.sol"
                },
                "region": {
                  "startLine": 315,
                  "endLine": 326
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "94daff6b630ec7a97285155ee41d3ecf25038a0fbe51cf018fd5de5af07e47ea"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "StorageSlot.getBytesSlot(bytes) (src/libraries/StorageSlot.sol#132-137) uses assembly\n\t- INLINE ASM (src/libraries/StorageSlot.sol#134-136)\n",
            "markdown": "[StorageSlot.getBytesSlot(bytes)](src/libraries/StorageSlot.sol#L132-L137) uses assembly\n\t- [INLINE ASM](src/libraries/StorageSlot.sol#L134-L136)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/libraries/StorageSlot.sol"
                },
                "region": {
                  "startLine": 132,
                  "endLine": 137
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9efd71cc32d4126265573845b1844a9634a849f3bd176f593e408a9e79ae6e08"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "StdCheatsSafe.assumeNoBlacklisted(address,address) (lib/forge-std/src/StdCheats.sol#198-216) uses assembly\n\t- INLINE ASM (lib/forge-std/src/StdCheats.sol#201-203)\n",
            "markdown": "[StdCheatsSafe.assumeNoBlacklisted(address,address)](lib/forge-std/src/StdCheats.sol#L198-L216) uses assembly\n\t- [INLINE ASM](lib/forge-std/src/StdCheats.sol#L201-L203)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdCheats.sol"
                },
                "region": {
                  "startLine": 198,
                  "endLine": 216
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a3b122c2a3456320f2b2768af924a5aaa75aa329fbe153f4d48ac79d9e69e3a3"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "StorageSlot.getUint256Slot(bytes32) (src/libraries/StorageSlot.sol#92-97) uses assembly\n\t- INLINE ASM (src/libraries/StorageSlot.sol#94-96)\n",
            "markdown": "[StorageSlot.getUint256Slot(bytes32)](src/libraries/StorageSlot.sol#L92-L97) uses assembly\n\t- [INLINE ASM](src/libraries/StorageSlot.sol#L94-L96)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/libraries/StorageSlot.sol"
                },
                "region": {
                  "startLine": 92,
                  "endLine": 97
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a471631ad6c4a1f38a711a2b36a205ae71260811177b1491f4d7b39ea532e031"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "StorageSlot.getStringSlot(string) (src/libraries/StorageSlot.sol#112-117) uses assembly\n\t- INLINE ASM (src/libraries/StorageSlot.sol#114-116)\n",
            "markdown": "[StorageSlot.getStringSlot(string)](src/libraries/StorageSlot.sol#L112-L117) uses assembly\n\t- [INLINE ASM](src/libraries/StorageSlot.sol#L114-L116)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/libraries/StorageSlot.sol"
                },
                "region": {
                  "startLine": 112,
                  "endLine": 117
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "af20297792177855e711765710e553240f9a94a96a7fd076769c88b61978e3c2"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "StorageSlot.getBooleanSlot(bytes32) (src/libraries/StorageSlot.sol#72-77) uses assembly\n\t- INLINE ASM (src/libraries/StorageSlot.sol#74-76)\n",
            "markdown": "[StorageSlot.getBooleanSlot(bytes32)](src/libraries/StorageSlot.sol#L72-L77) uses assembly\n\t- [INLINE ASM](src/libraries/StorageSlot.sol#L74-L76)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/libraries/StorageSlot.sol"
                },
                "region": {
                  "startLine": 72,
                  "endLine": 77
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c2050a0eac8c7ccbdb55d3d79205652ac4a62909d7232f4e0a96bb56c1a87b2e"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "StdCheatsSafe.deployCode(string,bytes) (lib/forge-std/src/StdCheats.sol#388-396) uses assembly\n\t- INLINE ASM (lib/forge-std/src/StdCheats.sol#391-393)\n",
            "markdown": "[StdCheatsSafe.deployCode(string,bytes)](lib/forge-std/src/StdCheats.sol#L388-L396) uses assembly\n\t- [INLINE ASM](lib/forge-std/src/StdCheats.sol#L391-L393)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdCheats.sol"
                },
                "region": {
                  "startLine": 388,
                  "endLine": 396
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cd381aa710d620c909e3b8e4033eff4a6a3f39b55a9ea97e2f06bb40d9261f51"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "StorageSlot.getBytes32Slot(bytes32) (src/libraries/StorageSlot.sol#82-87) uses assembly\n\t- INLINE ASM (src/libraries/StorageSlot.sol#84-86)\n",
            "markdown": "[StorageSlot.getBytes32Slot(bytes32)](src/libraries/StorageSlot.sol#L82-L87) uses assembly\n\t- [INLINE ASM](src/libraries/StorageSlot.sol#L84-L86)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/libraries/StorageSlot.sol"
                },
                "region": {
                  "startLine": 82,
                  "endLine": 87
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "eee8f2fec9965f6f5e8ac09b47e0e5dccc515107f583937f9f979abcf6f79af1"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "StdChains.getChainWithUpdatedRpcUrl(string,StdChains.Chain) (lib/forge-std/src/StdChains.sol#153-176) uses assembly\n\t- INLINE ASM (lib/forge-std/src/StdChains.sol#169-171)\n",
            "markdown": "[StdChains.getChainWithUpdatedRpcUrl(string,StdChains.Chain)](lib/forge-std/src/StdChains.sol#L153-L176) uses assembly\n\t- [INLINE ASM](lib/forge-std/src/StdChains.sol#L169-L171)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdChains.sol"
                },
                "region": {
                  "startLine": 153,
                  "endLine": 176
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f9c2847392f9318b7e3e007bc1c845d4aebf46453395c9ae01c97a0c416ceee4"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "stdStorageSafe.flatten(bytes32[]) (lib/forge-std/src/StdStorage.sol#181-192) uses assembly\n\t- INLINE ASM (lib/forge-std/src/StdStorage.sol#186-188)\n",
            "markdown": "[stdStorageSafe.flatten(bytes32[])](lib/forge-std/src/StdStorage.sol#L181-L192) uses assembly\n\t- [INLINE ASM](lib/forge-std/src/StdStorage.sol#L186-L188)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStorage.sol"
                },
                "region": {
                  "startLine": 181,
                  "endLine": 192
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ff8ff1be5054902896e1d12ac2da739a72cdef3fd0cf3c7075364d62582fae2b"
          }
        },
        {
          "ruleId": "3-0-boolean-equal",
          "message": {
            "text": "StdCheatsSafe.assumeNoBlacklisted(address,address) (lib/forge-std/src/StdCheats.sol#198-216) compares to a boolean constant:\n\t-vm.assume(! success || abi.decode(returnData,(bool)) == false) (lib/forge-std/src/StdCheats.sol#215)\n",
            "markdown": "[StdCheatsSafe.assumeNoBlacklisted(address,address)](lib/forge-std/src/StdCheats.sol#L198-L216) compares to a boolean constant:\n\t-[vm.assume(! success || abi.decode(returnData,(bool)) == false)](lib/forge-std/src/StdCheats.sol#L215)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdCheats.sol"
                },
                "region": {
                  "startLine": 198,
                  "endLine": 216
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "60eff344d3998134d9f182830e8b5ff60cadf4bd435354751d31abe232946181"
          }
        },
        {
          "ruleId": "3-0-boolean-equal",
          "message": {
            "text": "StdCheatsSafe.assumeNoBlacklisted(address,address) (lib/forge-std/src/StdCheats.sol#198-216) compares to a boolean constant:\n\t-vm.assume(! success || abi.decode(returnData,(bool)) == false) (lib/forge-std/src/StdCheats.sol#211)\n",
            "markdown": "[StdCheatsSafe.assumeNoBlacklisted(address,address)](lib/forge-std/src/StdCheats.sol#L198-L216) compares to a boolean constant:\n\t-[vm.assume(! success || abi.decode(returnData,(bool)) == false)](lib/forge-std/src/StdCheats.sol#L211)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdCheats.sol"
                },
                "region": {
                  "startLine": 198,
                  "endLine": 216
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "dcbe89faaf16006d611dc5de6f82e79ef5eee72564482efeb3e874a3413155ec"
          }
        },
        {
          "ruleId": "3-0-pragma",
          "message": {
            "text": "Different versions of Solidity are used:\n\t- Version used: ['=0.8.19', '>=0.4.22<0.9.0', '>=0.5.0', '>=0.6.0<0.9.0', '>=0.6.2<0.9.0']\n\t- =0.8.19 (src/ERC1967Proxy.sol#4)\n\t- =0.8.19 (src/ERC1967Utils.sol#4)\n\t- =0.8.19 (src/Proxy.sol#4)\n\t- =0.8.19 (src/TransparentUpgradeableProxy.sol#4)\n\t- =0.8.19 (src/interfaces/IBeacon.sol#4)\n\t- =0.8.19 (src/interfaces/IERC1967.sol#4)\n\t- =0.8.19 (src/libraries/Address.sol#4)\n\t- =0.8.19 (src/libraries/StorageSlot.sol#5)\n\t- =0.8.19 (test/BasicCheck.t.sol#1)\n\t- =0.8.19 (test/mock/Counter.sol#1)\n\t- >=0.4.22<0.9.0 (lib/forge-std/src/StdStyle.sol#2)\n\t- >=0.4.22<0.9.0 (lib/forge-std/src/console.sol#2)\n\t- >=0.4.22<0.9.0 (lib/forge-std/src/console2.sol#2)\n\t- >=0.5.0 (lib/forge-std/lib/ds-test/src/test.sol#16)\n\t- >=0.6.0<0.9.0 (lib/forge-std/src/StdJson.sol#2)\n\t- >=0.6.2<0.9.0 (lib/forge-std/src/Base.sol#2)\n\t- >=0.6.2<0.9.0 (lib/forge-std/src/StdAssertions.sol#2)\n\t- >=0.6.2<0.9.0 (lib/forge-std/src/StdChains.sol#2)\n\t- >=0.6.2<0.9.0 (lib/forge-std/src/StdCheats.sol#2)\n\t- >=0.6.2<0.9.0 (lib/forge-std/src/StdError.sol#3)\n\t- >=0.6.2<0.9.0 (lib/forge-std/src/StdInvariant.sol#2)\n\t- >=0.6.2<0.9.0 (lib/forge-std/src/StdMath.sol#2)\n\t- >=0.6.2<0.9.0 (lib/forge-std/src/StdStorage.sol#2)\n\t- >=0.6.2<0.9.0 (lib/forge-std/src/StdUtils.sol#2)\n\t- >=0.6.2<0.9.0 (lib/forge-std/src/Test.sol#2)\n\t- >=0.6.2<0.9.0 (lib/forge-std/src/Vm.sol#2)\n\t- >=0.6.2<0.9.0 (lib/forge-std/src/interfaces/IMulticall3.sol#2)\n\t- ABIEncoderV2 (lib/forge-std/src/StdChains.sol#4)\n\t- ABIEncoderV2 (lib/forge-std/src/StdCheats.sol#4)\n\t- ABIEncoderV2 (lib/forge-std/src/StdInvariant.sol#4)\n\t- ABIEncoderV2 (lib/forge-std/src/StdJson.sol#4)\n\t- ABIEncoderV2 (lib/forge-std/src/StdUtils.sol#4)\n\t- ABIEncoderV2 (lib/forge-std/src/Test.sol#4)\n\t- ABIEncoderV2 (lib/forge-std/src/Vm.sol#4)\n\t- ABIEncoderV2 (lib/forge-std/src/interfaces/IMulticall3.sol#4)\n",
            "markdown": "Different versions of Solidity are used:\n\t- Version used: ['=0.8.19', '>=0.4.22<0.9.0', '>=0.5.0', '>=0.6.0<0.9.0', '>=0.6.2<0.9.0']\n\t- [=0.8.19](src/ERC1967Proxy.sol#L4)\n\t- [=0.8.19](src/ERC1967Utils.sol#L4)\n\t- [=0.8.19](src/Proxy.sol#L4)\n\t- [=0.8.19](src/TransparentUpgradeableProxy.sol#L4)\n\t- [=0.8.19](src/interfaces/IBeacon.sol#L4)\n\t- [=0.8.19](src/interfaces/IERC1967.sol#L4)\n\t- [=0.8.19](src/libraries/Address.sol#L4)\n\t- [=0.8.19](src/libraries/StorageSlot.sol#L5)\n\t- [=0.8.19](test/BasicCheck.t.sol#L1)\n\t- [=0.8.19](test/mock/Counter.sol#L1)\n\t- [>=0.4.22<0.9.0](lib/forge-std/src/StdStyle.sol#L2)\n\t- [>=0.4.22<0.9.0](lib/forge-std/src/console.sol#L2)\n\t- [>=0.4.22<0.9.0](lib/forge-std/src/console2.sol#L2)\n\t- [>=0.5.0](lib/forge-std/lib/ds-test/src/test.sol#L16)\n\t- [>=0.6.0<0.9.0](lib/forge-std/src/StdJson.sol#L2)\n\t- [>=0.6.2<0.9.0](lib/forge-std/src/Base.sol#L2)\n\t- [>=0.6.2<0.9.0](lib/forge-std/src/StdAssertions.sol#L2)\n\t- [>=0.6.2<0.9.0](lib/forge-std/src/StdChains.sol#L2)\n\t- [>=0.6.2<0.9.0](lib/forge-std/src/StdCheats.sol#L2)\n\t- [>=0.6.2<0.9.0](lib/forge-std/src/StdError.sol#L3)\n\t- [>=0.6.2<0.9.0](lib/forge-std/src/StdInvariant.sol#L2)\n\t- [>=0.6.2<0.9.0](lib/forge-std/src/StdMath.sol#L2)\n\t- [>=0.6.2<0.9.0](lib/forge-std/src/StdStorage.sol#L2)\n\t- [>=0.6.2<0.9.0](lib/forge-std/src/StdUtils.sol#L2)\n\t- [>=0.6.2<0.9.0](lib/forge-std/src/Test.sol#L2)\n\t- [>=0.6.2<0.9.0](lib/forge-std/src/Vm.sol#L2)\n\t- [>=0.6.2<0.9.0](lib/forge-std/src/interfaces/IMulticall3.sol#L2)\n\t- [ABIEncoderV2](lib/forge-std/src/StdChains.sol#L4)\n\t- [ABIEncoderV2](lib/forge-std/src/StdCheats.sol#L4)\n\t- [ABIEncoderV2](lib/forge-std/src/StdInvariant.sol#L4)\n\t- [ABIEncoderV2](lib/forge-std/src/StdJson.sol#L4)\n\t- [ABIEncoderV2](lib/forge-std/src/StdUtils.sol#L4)\n\t- [ABIEncoderV2](lib/forge-std/src/Test.sol#L4)\n\t- [ABIEncoderV2](lib/forge-std/src/Vm.sol#L4)\n\t- [ABIEncoderV2](lib/forge-std/src/interfaces/IMulticall3.sol#L4)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/ERC1967Proxy.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "89d538fdf8ad577551d83ee32a6d3ca42805ed158bc89c188abec9fe5b4895a3"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "StorageSlot.getBytesSlot(bytes) (src/libraries/StorageSlot.sol#132-137) is never used and should be removed\n",
            "markdown": "[StorageSlot.getBytesSlot(bytes)](src/libraries/StorageSlot.sol#L132-L137) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/libraries/StorageSlot.sol"
                },
                "region": {
                  "startLine": 132,
                  "endLine": 137
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "10e40351ed7cb3385654b7d9ee7763abdf63864ec8a803ac048685cdfb0ad4cf"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "Address.sendValue(address,uint256) (src/libraries/Address.sol#41-50) is never used and should be removed\n",
            "markdown": "[Address.sendValue(address,uint256)](src/libraries/Address.sol#L41-L50) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/libraries/Address.sol"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 50
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "12a942d5be420eca31c018a0c7174f38ee974cb96fb40dd119447b534a3e53cc"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "Address.functionCallWithValue(address,bytes,uint256) (src/libraries/Address.sol#103-105) is never used and should be removed\n",
            "markdown": "[Address.functionCallWithValue(address,bytes,uint256)](src/libraries/Address.sol#L103-L105) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/libraries/Address.sol"
                },
                "region": {
                  "startLine": 103,
                  "endLine": 105
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1a011acfb8b1a4ba5c814ed2c6e65fe0e9a06cab5372a052ba509f504eeb55c8"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "StorageSlot.getUint256Slot(bytes32) (src/libraries/StorageSlot.sol#92-97) is never used and should be removed\n",
            "markdown": "[StorageSlot.getUint256Slot(bytes32)](src/libraries/StorageSlot.sol#L92-L97) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/libraries/StorageSlot.sol"
                },
                "region": {
                  "startLine": 92,
                  "endLine": 97
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1bdc568454fd8edc14e968cab094ab3e634cb5669f43741a9a3a62e56658ec1b"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "Address.verifyCallResult(bool,bytes,function()) (src/libraries/Address.sol#226-236) is never used and should be removed\n",
            "markdown": "[Address.verifyCallResult(bool,bytes,function())](src/libraries/Address.sol#L226-L236) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/libraries/Address.sol"
                },
                "region": {
                  "startLine": 226,
                  "endLine": 236
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1e00e4783a6b098be4b2c97711201561f81534210b1cdade731d51f0542d31fb"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "StorageSlot.getStringSlot(bytes32) (src/libraries/StorageSlot.sol#102-107) is never used and should be removed\n",
            "markdown": "[StorageSlot.getStringSlot(bytes32)](src/libraries/StorageSlot.sol#L102-L107) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/libraries/StorageSlot.sol"
                },
                "region": {
                  "startLine": 102,
                  "endLine": 107
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2527d37b0b28eb2202ce7b0a5caa5ad7f2c825c22138d725d6ee3201536c23f1"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "ERC1967Utils.upgradeBeaconToAndCall(address,bytes,bool) (src/ERC1967Utils.sol#171-177) is never used and should be removed\n",
            "markdown": "[ERC1967Utils.upgradeBeaconToAndCall(address,bytes,bool)](src/ERC1967Utils.sol#L171-L177) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/ERC1967Utils.sol"
                },
                "region": {
                  "startLine": 171,
                  "endLine": 177
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "37bbd3ec64345a0c5f56116aa5dc6418a4fc2403c1f096d8059996ebd7eaf96e"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "ERC1967Utils.getBeacon() (src/ERC1967Utils.sol#145-147) is never used and should be removed\n",
            "markdown": "[ERC1967Utils.getBeacon()](src/ERC1967Utils.sol#L145-L147) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/ERC1967Utils.sol"
                },
                "region": {
                  "startLine": 145,
                  "endLine": 147
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "55e2a9661a80753d9d5db942267570e326ba154fc5222086155e1298f4e31b9e"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "ERC1967Utils._setBeacon(address) (src/ERC1967Utils.sol#152-163) is never used and should be removed\n",
            "markdown": "[ERC1967Utils._setBeacon(address)](src/ERC1967Utils.sol#L152-L163) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/ERC1967Utils.sol"
                },
                "region": {
                  "startLine": 152,
                  "endLine": 163
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6eca0ea234347604cfa789d018814b4db447bbf217b4a3d5f78bfa20269b8c57"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "Address.functionStaticCall(address,bytes,function()) (src/libraries/Address.sol#146-153) is never used and should be removed\n",
            "markdown": "[Address.functionStaticCall(address,bytes,function())](src/libraries/Address.sol#L146-L153) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/libraries/Address.sol"
                },
                "region": {
                  "startLine": 146,
                  "endLine": 153
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7b2decabadc1ee6335a93bb639ad05306a5fb5a84e0e077a64a6efb44ba24944"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "Address.functionCall(address,bytes,function()) (src/libraries/Address.sol#84-90) is never used and should be removed\n",
            "markdown": "[Address.functionCall(address,bytes,function())](src/libraries/Address.sol#L84-L90) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/libraries/Address.sol"
                },
                "region": {
                  "startLine": 84,
                  "endLine": 90
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8b760f3e35ceb8df77ad65857af84e6e813763b45ffb6db0f714b57f968a7dc1"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "Address.functionStaticCall(address,bytes) (src/libraries/Address.sol#136-138) is never used and should be removed\n",
            "markdown": "[Address.functionStaticCall(address,bytes)](src/libraries/Address.sol#L136-L138) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/libraries/Address.sol"
                },
                "region": {
                  "startLine": 136,
                  "endLine": 138
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "965cf19414c2dfcc76c22ba9c520aae5df9f273448285f0a897561950984b0c0"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "StorageSlot.getStringSlot(string) (src/libraries/StorageSlot.sol#112-117) is never used and should be removed\n",
            "markdown": "[StorageSlot.getStringSlot(string)](src/libraries/StorageSlot.sol#L112-L117) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/libraries/StorageSlot.sol"
                },
                "region": {
                  "startLine": 112,
                  "endLine": 117
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bbd1221122520a9803bf3490981e1113c92cb216d95076e071148fe67ff9e44a"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "Address.functionCallWithValue(address,bytes,uint256,function()) (src/libraries/Address.sol#117-128) is never used and should be removed\n",
            "markdown": "[Address.functionCallWithValue(address,bytes,uint256,function())](src/libraries/Address.sol#L117-L128) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/libraries/Address.sol"
                },
                "region": {
                  "startLine": 117,
                  "endLine": 128
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c58f48f105a22aa38b71c50acd4702264180f4bc3cd0c96aca32182c71171d7f"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "Address.defaultRevert() (src/libraries/Address.sol#241-243) is never used and should be removed\n",
            "markdown": "[Address.defaultRevert()](src/libraries/Address.sol#L241-L243) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/libraries/Address.sol"
                },
                "region": {
                  "startLine": 241,
                  "endLine": 243
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c6e3f6ecd5ceb984ec82e2d62cf3d5ed084812a0a3f4284bc0cd867d44d03acc"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "StorageSlot.getBooleanSlot(bytes32) (src/libraries/StorageSlot.sol#72-77) is never used and should be removed\n",
            "markdown": "[StorageSlot.getBooleanSlot(bytes32)](src/libraries/StorageSlot.sol#L72-L77) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/libraries/StorageSlot.sol"
                },
                "region": {
                  "startLine": 72,
                  "endLine": 77
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cd200c1fd59c89fcb512fe3922acf6d4666d481946351b38843b8c2168977d50"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "StorageSlot.getBytes32Slot(bytes32) (src/libraries/StorageSlot.sol#82-87) is never used and should be removed\n",
            "markdown": "[StorageSlot.getBytes32Slot(bytes32)](src/libraries/StorageSlot.sol#L82-L87) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/libraries/StorageSlot.sol"
                },
                "region": {
                  "startLine": 82,
                  "endLine": 87
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d0ca8c5491280579d14b7a76ea86b8937566c4dd91215648427f08f7ec3749eb"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "Address.verifyCallResult(bool,bytes) (src/libraries/Address.sol#212-214) is never used and should be removed\n",
            "markdown": "[Address.verifyCallResult(bool,bytes)](src/libraries/Address.sol#L212-L214) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/libraries/Address.sol"
                },
                "region": {
                  "startLine": 212,
                  "endLine": 214
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e370376931bf23a9c85639dd1937dd5a9b51b959a730ec1d05a420aa0bafa98a"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "StorageSlot.getBytesSlot(bytes32) (src/libraries/StorageSlot.sol#122-127) is never used and should be removed\n",
            "markdown": "[StorageSlot.getBytesSlot(bytes32)](src/libraries/StorageSlot.sol#L122-L127) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/libraries/StorageSlot.sol"
                },
                "region": {
                  "startLine": 122,
                  "endLine": 127
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f8fba9e84d678decd0bd5cd4012183cb99bd760bc4e9243ae018de59e12850c6"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "Address.functionCall(address,bytes) (src/libraries/Address.sol#70-72) is never used and should be removed\n",
            "markdown": "[Address.functionCall(address,bytes)](src/libraries/Address.sol#L70-L72) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/libraries/Address.sol"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 72
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fea5c9eedf61ab3f6f82d5652ccc5af6a58b82f13b03fdb9152af39708badca1"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.2<0.9.0 (lib/forge-std/src/StdChains.sol#2) is too complex\n",
            "markdown": "Pragma version[>=0.6.2<0.9.0](lib/forge-std/src/StdChains.sol#L2) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdChains.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "09c086e935ee6ec5487f83037bf2efad7b76ddea9827689ed23a1ab30ce83e2e"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.2<0.9.0 (lib/forge-std/src/Test.sol#2) is too complex\n",
            "markdown": "Pragma version[>=0.6.2<0.9.0](lib/forge-std/src/Test.sol#L2) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/Test.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "115fcad63944682b4c619d1d059d5645dfe3bfb04cf47429c1240b106816f8a3"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.2<0.9.0 (lib/forge-std/src/StdCheats.sol#2) is too complex\n",
            "markdown": "Pragma version[>=0.6.2<0.9.0](lib/forge-std/src/StdCheats.sol#L2) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdCheats.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "133b3c4c94b2133295c122f93e9a51f9b4e9aa5dc9529901c4bbafb783b95a5b"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.8.19 (test/mock/Counter.sol#1) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.\n",
            "markdown": "Pragma version[=0.8.19](test/mock/Counter.sol#L1) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/mock/Counter.sol"
                },
                "region": {
                  "startLine": 1,
                  "endLine": 1
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3b4c0fa9120da7fa1fe53e23a58a0bedd282496de6818443da483eda3ae4e8c8"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.2<0.9.0 (lib/forge-std/src/StdMath.sol#2) is too complex\n",
            "markdown": "Pragma version[>=0.6.2<0.9.0](lib/forge-std/src/StdMath.sol#L2) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdMath.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4f457821bd2c475619bbc51a440c7918e3ed7e71cfb0af9d4de6969462ef5e39"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.2<0.9.0 (lib/forge-std/src/StdAssertions.sol#2) is too complex\n",
            "markdown": "Pragma version[>=0.6.2<0.9.0](lib/forge-std/src/StdAssertions.sol#L2) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdAssertions.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5916020b1843e35aa92d0fa95880e10899ca6cf9b27089511a2ed9e4895ef2c4"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.2<0.9.0 (lib/forge-std/src/Vm.sol#2) is too complex\n",
            "markdown": "Pragma version[>=0.6.2<0.9.0](lib/forge-std/src/Vm.sol#L2) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/Vm.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "62cd028b0e7c6725a91d1b7117ce671200e4c819e281dd277bad0bcd7b69f1d9"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.8.19 (src/ERC1967Proxy.sol#4) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.\n",
            "markdown": "Pragma version[=0.8.19](src/ERC1967Proxy.sol#L4) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/ERC1967Proxy.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "63995777660c1dc424703f9c7eb748fdd21ab88f94fae4a6bcd3e2d34c7dd6a4"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.8.19 (src/libraries/StorageSlot.sol#5) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.\n",
            "markdown": "Pragma version[=0.8.19](src/libraries/StorageSlot.sol#L5) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/libraries/StorageSlot.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "867c1ee6acc332610366e1ac5328777da02872f79d991fb7eb8ce57b1fedbdc3"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.4.22<0.9.0 (lib/forge-std/src/StdStyle.sol#2) is too complex\n",
            "markdown": "Pragma version[>=0.4.22<0.9.0](lib/forge-std/src/StdStyle.sol#L2) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStyle.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8ee7a1963135cec2183f9aaa3d97c58a5a1e82ab4270a86455122e00a8c03d8b"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.8.19 (src/ERC1967Utils.sol#4) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.\n",
            "markdown": "Pragma version[=0.8.19](src/ERC1967Utils.sol#L4) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/ERC1967Utils.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8f004f4dbdd5f1a7b618d1febece48d4277b4210dc35409ed65d0589756e6250"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.8.19 (src/libraries/Address.sol#4) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.\n",
            "markdown": "Pragma version[=0.8.19](src/libraries/Address.sol#L4) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/libraries/Address.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9c5477cd133a2e3c97da8d406e0cfe6800e1a4a4e4b4f36e5f9a9789838a7860"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.8.19 (src/interfaces/IERC1967.sol#4) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.\n",
            "markdown": "Pragma version[=0.8.19](src/interfaces/IERC1967.sol#L4) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/interfaces/IERC1967.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9f0d63ecbf25c6fd51fcea4078ace3cc7ead4d9db270a4cc4eab9a9df6d13de0"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.2<0.9.0 (lib/forge-std/src/StdUtils.sol#2) is too complex\n",
            "markdown": "Pragma version[>=0.6.2<0.9.0](lib/forge-std/src/StdUtils.sol#L2) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdUtils.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a04c97b0a3e588069d3c2154e225cb701fc8060c45cb0f02bed1f99f6d97a994"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.4.22<0.9.0 (lib/forge-std/src/console.sol#2) is too complex\n",
            "markdown": "Pragma version[>=0.4.22<0.9.0](lib/forge-std/src/console.sol#L2) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/console.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a605f5b5a8550336c8f0321acdb123c705328814963f14433f891236fc35301b"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.9.0 (lib/forge-std/src/StdJson.sol#2) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.9.0](lib/forge-std/src/StdJson.sol#L2) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdJson.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a72220056490cb0ae237a4d083932c59433bd2f43ba867d72b16898fd11dc745"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.8.19 (src/TransparentUpgradeableProxy.sol#4) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.\n",
            "markdown": "Pragma version[=0.8.19](src/TransparentUpgradeableProxy.sol#L4) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/TransparentUpgradeableProxy.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b38858b04dcdd8a0e1b4f9ae10d8f7413d09cf40eccce4ab41e0887470a695b5"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.4.22<0.9.0 (lib/forge-std/src/console2.sol#2) is too complex\n",
            "markdown": "Pragma version[>=0.4.22<0.9.0](lib/forge-std/src/console2.sol#L2) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/console2.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b689bdd4690d692edbe9bea39a518fbbd48433a58889bba6e798e0eeab81996a"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.2<0.9.0 (lib/forge-std/src/interfaces/IMulticall3.sol#2) is too complex\n",
            "markdown": "Pragma version[>=0.6.2<0.9.0](lib/forge-std/src/interfaces/IMulticall3.sol#L2) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/interfaces/IMulticall3.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b887c02bdf7f3c3c076c5ef07e98df33bcf0db70b42b487d167d3c00601a6aca"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.2<0.9.0 (lib/forge-std/src/Base.sol#2) is too complex\n",
            "markdown": "Pragma version[>=0.6.2<0.9.0](lib/forge-std/src/Base.sol#L2) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/Base.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bc5e8a127b9e7533573b96a3623ff08aec7de3047533245f936624062584b512"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.8.19 (src/interfaces/IBeacon.sol#4) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.\n",
            "markdown": "Pragma version[=0.8.19](src/interfaces/IBeacon.sol#L4) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/interfaces/IBeacon.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c37190dcff2ff18587fd291cda3f791ac30f1d092a523c48dfde4088064ec298"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.5.0 (lib/forge-std/lib/ds-test/src/test.sol#16) allows old versions\n",
            "markdown": "Pragma version[>=0.5.0](lib/forge-std/lib/ds-test/src/test.sol#L16) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/lib/ds-test/src/test.sol"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 16
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cf460fce78158b3c4112822d5e379fb66d5c53df2f09b9483a4ac49f29ab477c"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.2<0.9.0 (lib/forge-std/src/StdError.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.2<0.9.0](lib/forge-std/src/StdError.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdError.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e44e05b8b62fb6693e1135eb74e4e106bf66badb07ca26b780ab3c002f45b4a2"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.8.19 (test/BasicCheck.t.sol#1) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.\n",
            "markdown": "Pragma version[=0.8.19](test/BasicCheck.t.sol#L1) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/BasicCheck.t.sol"
                },
                "region": {
                  "startLine": 1,
                  "endLine": 1
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e505b8812acbd1f985c270c53b075fcd4a30243d19241b372fcdb514808931ef"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.2<0.9.0 (lib/forge-std/src/StdStorage.sol#2) is too complex\n",
            "markdown": "Pragma version[>=0.6.2<0.9.0](lib/forge-std/src/StdStorage.sol#L2) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStorage.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e698621ea18a833766eabd66dc9b658dba67d9feb34a644786c435d6f1a20277"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.2<0.9.0 (lib/forge-std/src/StdInvariant.sol#2) is too complex\n",
            "markdown": "Pragma version[>=0.6.2<0.9.0](lib/forge-std/src/StdInvariant.sol#L2) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdInvariant.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e87dea3337d098e7cbf98faee74ab89aabb3ac570f77aee9f2864fcb11d3b85c"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.8.19 (src/Proxy.sol#4) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.\n",
            "markdown": "Pragma version[=0.8.19](src/Proxy.sol#L4) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Proxy.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f1f9f37399b3e7efa16f70b9dcea0390eed99ff8547129b8542b6488202369d7"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in StdUtils.console2_log(string,uint256) (lib/forge-std/src/StdUtils.sol#189-192):\n\t- (status) = address(CONSOLE2_ADDRESS).staticcall(abi.encodeWithSignature(log(string,uint256),p0,p1)) (lib/forge-std/src/StdUtils.sol#190)\n",
            "markdown": "Low level call in [StdUtils.console2_log(string,uint256)](lib/forge-std/src/StdUtils.sol#L189-L192):\n\t- [(status) = address(CONSOLE2_ADDRESS).staticcall(abi.encodeWithSignature(log(string,uint256),p0,p1))](lib/forge-std/src/StdUtils.sol#L190)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdUtils.sol"
                },
                "region": {
                  "startLine": 189,
                  "endLine": 192
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "08660adb352544e5131ec2c8f624c5fa4f5e37a5abeca18203828ddc08ae6fa0"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in StdAssertions.assertEqCall(address,bytes,address,bytes,bool) (lib/forge-std/src/StdAssertions.sol#344-375):\n\t- (successA,returnDataA) = address(targetA).call(callDataA) (lib/forge-std/src/StdAssertions.sol#351)\n\t- (successB,returnDataB) = address(targetB).call(callDataB) (lib/forge-std/src/StdAssertions.sol#352)\n",
            "markdown": "Low level call in [StdAssertions.assertEqCall(address,bytes,address,bytes,bool)](lib/forge-std/src/StdAssertions.sol#L344-L375):\n\t- [(successA,returnDataA) = address(targetA).call(callDataA)](lib/forge-std/src/StdAssertions.sol#L351)\n\t- [(successB,returnDataB) = address(targetB).call(callDataB)](lib/forge-std/src/StdAssertions.sol#L352)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdAssertions.sol"
                },
                "region": {
                  "startLine": 344,
                  "endLine": 375
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2c587b6b9bf5d0020a50cf55b43a7f44bf347e9ba605236c3064b42409acc2dd"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in stdStorageSafe.find(StdStorage) (lib/forge-std/src/StdStorage.sol#32-105):\n\t- (rdat) = who.staticcall(cald) (lib/forge-std/src/StdStorage.sol#46)\n\t- (success,rdat_scope_0) = who.staticcall(cald) (lib/forge-std/src/StdStorage.sol#76)\n",
            "markdown": "Low level call in [stdStorageSafe.find(StdStorage)](lib/forge-std/src/StdStorage.sol#L32-L105):\n\t- [(rdat) = who.staticcall(cald)](lib/forge-std/src/StdStorage.sol#L46)\n\t- [(success,rdat_scope_0) = who.staticcall(cald)](lib/forge-std/src/StdStorage.sol#L76)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStorage.sol"
                },
                "region": {
                  "startLine": 32,
                  "endLine": 105
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2fcbb108b36c60b53f72b781e58ad29c157e3c60c1abec0c3c8ee4f2ba8c5160"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in DSTest.fail() (lib/forge-std/lib/ds-test/src/test.sol#65-76):\n\t- (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)\n",
            "markdown": "Low level call in [DSTest.fail()](lib/forge-std/lib/ds-test/src/test.sol#L65-L76):\n\t- [(status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01)))))](lib/forge-std/lib/ds-test/src/test.sol#L67-L72)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/lib/ds-test/src/test.sol"
                },
                "region": {
                  "startLine": 65,
                  "endLine": 76
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "374b36333d52c41bad07a9b5eeaf2e9d53668e850359632958142010de5ed83a"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in StdCheats.dealERC1155(address,address,uint256,uint256,bool) (lib/forge-std/src/StdCheats.sol#630-653):\n\t- (balData) = token.staticcall(abi.encodeWithSelector(0x00fdd58e,to,id)) (lib/forge-std/src/StdCheats.sol#632)\n\t- (totSupData) = token.staticcall(abi.encodeWithSelector(0xbd85b039,id)) (lib/forge-std/src/StdCheats.sol#640)\n",
            "markdown": "Low level call in [StdCheats.dealERC1155(address,address,uint256,uint256,bool)](lib/forge-std/src/StdCheats.sol#L630-L653):\n\t- [(balData) = token.staticcall(abi.encodeWithSelector(0x00fdd58e,to,id))](lib/forge-std/src/StdCheats.sol#L632)\n\t- [(totSupData) = token.staticcall(abi.encodeWithSelector(0xbd85b039,id))](lib/forge-std/src/StdCheats.sol#L640)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdCheats.sol"
                },
                "region": {
                  "startLine": 630,
                  "endLine": 653
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "50aeadbbceca98a897bd1ef00c2925c69613c61e603f62f9f40ed24390a40127"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in StdCheatsSafe.assumePayable(address) (lib/forge-std/src/StdCheats.sol#515-518):\n\t- (success) = address(addr).call{value: 0}() (lib/forge-std/src/StdCheats.sol#516)\n",
            "markdown": "Low level call in [StdCheatsSafe.assumePayable(address)](lib/forge-std/src/StdCheats.sol#L515-L518):\n\t- [(success) = address(addr).call{value: 0}()](lib/forge-std/src/StdCheats.sol#L516)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdCheats.sol"
                },
                "region": {
                  "startLine": 515,
                  "endLine": 518
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6aa4cd48bab42bfb258ff955711dc5b15b5968c954352f75f7231ad7d1cd7853"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in Address.functionCallWithValue(address,bytes,uint256,function()) (src/libraries/Address.sol#117-128):\n\t- (success,returndata) = target.call{value: value}(data) (src/libraries/Address.sol#126)\n",
            "markdown": "Low level call in [Address.functionCallWithValue(address,bytes,uint256,function())](src/libraries/Address.sol#L117-L128):\n\t- [(success,returndata) = target.call{value: value}(data)](src/libraries/Address.sol#L126)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/libraries/Address.sol"
                },
                "region": {
                  "startLine": 117,
                  "endLine": 128
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6adfd61b2326f3c22b5a867417599eb5c9fcd0822c81889999f21df5a12812ec"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in Address.sendValue(address,uint256) (src/libraries/Address.sol#41-50):\n\t- (success) = recipient.call{value: amount}() (src/libraries/Address.sol#46)\n",
            "markdown": "Low level call in [Address.sendValue(address,uint256)](src/libraries/Address.sol#L41-L50):\n\t- [(success) = recipient.call{value: amount}()](src/libraries/Address.sol#L46)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/libraries/Address.sol"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 50
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7c3a6df2078de4ab5acfe11fcc3b61e389a0186c5b807ea0ad46c52cb6114d16"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in StdCheats.deal(address,address,uint256,bool) (lib/forge-std/src/StdCheats.sol#609-628):\n\t- (balData) = token.staticcall(abi.encodeWithSelector(0x70a08231,to)) (lib/forge-std/src/StdCheats.sol#611)\n\t- (totSupData) = token.staticcall(abi.encodeWithSelector(0x18160ddd)) (lib/forge-std/src/StdCheats.sol#619)\n",
            "markdown": "Low level call in [StdCheats.deal(address,address,uint256,bool)](lib/forge-std/src/StdCheats.sol#L609-L628):\n\t- [(balData) = token.staticcall(abi.encodeWithSelector(0x70a08231,to))](lib/forge-std/src/StdCheats.sol#L611)\n\t- [(totSupData) = token.staticcall(abi.encodeWithSelector(0x18160ddd))](lib/forge-std/src/StdCheats.sol#L619)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdCheats.sol"
                },
                "region": {
                  "startLine": 609,
                  "endLine": 628
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8495d5a89578037bf3bb9f81653ac5ef4f98b2e3e9bc94403d60fd68318703f1"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in DSTest.failed() (lib/forge-std/lib/ds-test/src/test.sol#47-63):\n\t- (retdata) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(load(address,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed)))) (lib/forge-std/lib/ds-test/src/test.sol#53-58)\n",
            "markdown": "Low level call in [DSTest.failed()](lib/forge-std/lib/ds-test/src/test.sol#L47-L63):\n\t- [(retdata) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(load(address,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed))))](lib/forge-std/lib/ds-test/src/test.sol#L53-L58)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/lib/ds-test/src/test.sol"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 63
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c83ba59977f248dbb2d4544931247ba1fb95422d5cc6ee0235f65084cd92eca9"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in StdCheats.dealERC721(address,address,uint256) (lib/forge-std/src/StdCheats.sol#655-675):\n\t- (successMinted,ownerData) = token.staticcall(abi.encodeWithSelector(0x6352211e,id)) (lib/forge-std/src/StdCheats.sol#657)\n\t- (fromBalData) = token.staticcall(abi.encodeWithSelector(0x70a08231,abi.decode(ownerData,(address)))) (lib/forge-std/src/StdCheats.sol#661-662)\n\t- (toBalData) = token.staticcall(abi.encodeWithSelector(0x70a08231,to)) (lib/forge-std/src/StdCheats.sol#666)\n",
            "markdown": "Low level call in [StdCheats.dealERC721(address,address,uint256)](lib/forge-std/src/StdCheats.sol#L655-L675):\n\t- [(successMinted,ownerData) = token.staticcall(abi.encodeWithSelector(0x6352211e,id))](lib/forge-std/src/StdCheats.sol#L657)\n\t- [(fromBalData) = token.staticcall(abi.encodeWithSelector(0x70a08231,abi.decode(ownerData,(address))))](lib/forge-std/src/StdCheats.sol#L661-L662)\n\t- [(toBalData) = token.staticcall(abi.encodeWithSelector(0x70a08231,to))](lib/forge-std/src/StdCheats.sol#L666)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdCheats.sol"
                },
                "region": {
                  "startLine": 655,
                  "endLine": 675
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c8f6f20d4b555fbb11ee9763ff46a693651463381a5060ca88dee4ccc4edf2fd"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in Address.functionStaticCall(address,bytes,function()) (src/libraries/Address.sol#146-153):\n\t- (success,returndata) = target.staticcall(data) (src/libraries/Address.sol#151)\n",
            "markdown": "Low level call in [Address.functionStaticCall(address,bytes,function())](src/libraries/Address.sol#L146-L153):\n\t- [(success,returndata) = target.staticcall(data)](src/libraries/Address.sol#L151)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/libraries/Address.sol"
                },
                "region": {
                  "startLine": 146,
                  "endLine": 153
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d45168e4d2570c9774f4adf1e8918d588549ccaac59f183d212926588c9d5000"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in StdCheatsSafe.assumeNoBlacklisted(address,address) (lib/forge-std/src/StdCheats.sol#198-216):\n\t- (success,returnData) = token.staticcall(abi.encodeWithSelector(0xfe575a87,addr)) (lib/forge-std/src/StdCheats.sol#210)\n\t- (success,returnData) = token.staticcall(abi.encodeWithSelector(0xe47d6060,addr)) (lib/forge-std/src/StdCheats.sol#214)\n",
            "markdown": "Low level call in [StdCheatsSafe.assumeNoBlacklisted(address,address)](lib/forge-std/src/StdCheats.sol#L198-L216):\n\t- [(success,returnData) = token.staticcall(abi.encodeWithSelector(0xfe575a87,addr))](lib/forge-std/src/StdCheats.sol#L210)\n\t- [(success,returnData) = token.staticcall(abi.encodeWithSelector(0xe47d6060,addr))](lib/forge-std/src/StdCheats.sol#L214)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdCheats.sol"
                },
                "region": {
                  "startLine": 198,
                  "endLine": 216
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "eb88cea7e2e37c5edf48214d1efce2dc0eb3ee444e9afaf20e5d6a2a8f9e8f88"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in stdStorage.checked_write(StdStorage,bytes32) (lib/forge-std/src/StdStorage.sol#251-281):\n\t- (rdat) = who.staticcall(cald) (lib/forge-std/src/StdStorage.sol#265)\n",
            "markdown": "Low level call in [stdStorage.checked_write(StdStorage,bytes32)](lib/forge-std/src/StdStorage.sol#L251-L281):\n\t- [(rdat) = who.staticcall(cald)](lib/forge-std/src/StdStorage.sol#L265)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStorage.sol"
                },
                "region": {
                  "startLine": 251,
                  "endLine": 281
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f0b28f6f9f2ef27b4d4a1d26d951a5afa40e3f9bb0238e2cd9483e16abf61e7f"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in Address.functionDelegateCall(address,bytes,function()) (src/libraries/Address.sol#171-178):\n\t- (success,returndata) = target.delegatecall(data) (src/libraries/Address.sol#176)\n",
            "markdown": "Low level call in [Address.functionDelegateCall(address,bytes,function())](src/libraries/Address.sol#L171-L178):\n\t- [(success,returndata) = target.delegatecall(data)](src/libraries/Address.sol#L176)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/libraries/Address.sol"
                },
                "region": {
                  "startLine": 171,
                  "endLine": 178
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f3529a9a8d5120ed6f4a92b20b50dd22d2582505220114b2398c48db09a21d7a"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in StdUtils.console2_log(string,string) (lib/forge-std/src/StdUtils.sol#194-197):\n\t- (status) = address(CONSOLE2_ADDRESS).staticcall(abi.encodeWithSignature(log(string,string),p0,p1)) (lib/forge-std/src/StdUtils.sol#195)\n",
            "markdown": "Low level call in [StdUtils.console2_log(string,string)](lib/forge-std/src/StdUtils.sol#L194-L197):\n\t- [(status) = address(CONSOLE2_ADDRESS).staticcall(abi.encodeWithSignature(log(string,string),p0,p1))](lib/forge-std/src/StdUtils.sol#L195)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdUtils.sol"
                },
                "region": {
                  "startLine": 194,
                  "endLine": 197
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fcfa439a0db56ba7c23a4896aaa5a1dbcab5a79bc0d9876eb7a9e6823e069de3"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter stdStorage.sig(StdStorage,string)._sig (lib/forge-std/src/StdStorage.sol#214) is not in mixedCase\n",
            "markdown": "Parameter [stdStorage.sig(StdStorage,string)._sig](lib/forge-std/src/StdStorage.sol#L214) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStorage.sol"
                },
                "region": {
                  "startLine": 214,
                  "endLine": 214
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0056bf768c321fc5401bcba5380cf161ccd27dfd0bd7d2ab57c4b3adcd38adc7"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function stdStorageSafe.read_uint(StdStorage) (lib/forge-std/src/StdStorage.sol#163-165) is not in mixedCase\n",
            "markdown": "Function [stdStorageSafe.read_uint(StdStorage)](lib/forge-std/src/StdStorage.sol#L163-L165) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStorage.sol"
                },
                "region": {
                  "startLine": 163,
                  "endLine": 165
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "01fe486101cf84653846b5156ef209c34b0e68025c7b652b15d872cdbaa4d430"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter stdStorage.target(StdStorage,address)._target (lib/forge-std/src/StdStorage.sol#206) is not in mixedCase\n",
            "markdown": "Parameter [stdStorage.target(StdStorage,address)._target](lib/forge-std/src/StdStorage.sol#L206) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStorage.sol"
                },
                "region": {
                  "startLine": 206,
                  "endLine": 206
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0585ebe94d74008288c465cf914108095b683f247f1f7d6a51e93d0837aa21b6"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function stdStorageSafe.read_int(StdStorage) (lib/forge-std/src/StdStorage.sol#167-169) is not in mixedCase\n",
            "markdown": "Function [stdStorageSafe.read_int(StdStorage)](lib/forge-std/src/StdStorage.sol#L167-L169) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStorage.sol"
                },
                "region": {
                  "startLine": 167,
                  "endLine": 169
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0744b8fc06ba774ede36876971322ca51f9337661efbe762e8bcda230ad31cb0"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter stdStorageSafe.sig(StdStorage,bytes4)._sig (lib/forge-std/src/StdStorage.sol#112) is not in mixedCase\n",
            "markdown": "Parameter [stdStorageSafe.sig(StdStorage,bytes4)._sig](lib/forge-std/src/StdStorage.sol#L112) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStorage.sol"
                },
                "region": {
                  "startLine": 112,
                  "endLine": 112
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0784b03b12880bbaca3e9b1e9a698fbf649211af4f07e902b4252b2b207e9c7d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Event DSTest.logs(bytes) (lib/forge-std/lib/ds-test/src/test.sol#20) is not in CapWords\n",
            "markdown": "Event [DSTest.logs(bytes)](lib/forge-std/lib/ds-test/src/test.sol#L20) is not in CapWords\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/lib/ds-test/src/test.sol"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "09a1a574f3ab52ddfa3173610f67393ca5b2bc7b4ff853f6cf4de110988769e7"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Event DSTest.log_named_int(string,int256) (lib/forge-std/lib/ds-test/src/test.sol#33) is not in CapWords\n",
            "markdown": "Event [DSTest.log_named_int(string,int256)](lib/forge-std/lib/ds-test/src/test.sol#L33) is not in CapWords\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/lib/ds-test/src/test.sol"
                },
                "region": {
                  "startLine": 33,
                  "endLine": 33
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0ada8d197a0d083329d1f97a8287e0553c42c0912b764e35a69501e48459c74d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function stdStorage.checked_write(StdStorage,bytes32) (lib/forge-std/src/StdStorage.sol#251-281) is not in mixedCase\n",
            "markdown": "Function [stdStorage.checked_write(StdStorage,bytes32)](lib/forge-std/src/StdStorage.sol#L251-L281) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStorage.sol"
                },
                "region": {
                  "startLine": 251,
                  "endLine": 281
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "11dc5c6601c7412be433c51b232ca1bfb098dbc8e89137143548f7eefa519d82"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function StdUtils.console2_log(string,string) (lib/forge-std/src/StdUtils.sol#194-197) is not in mixedCase\n",
            "markdown": "Function [StdUtils.console2_log(string,string)](lib/forge-std/src/StdUtils.sol#L194-L197) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdUtils.sol"
                },
                "region": {
                  "startLine": 194,
                  "endLine": 197
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "15e042396bc6dba80e3ec27d09792988de583984cd7c960f761f75ea7db4a242"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant StdUtils.multicall (lib/forge-std/src/StdUtils.sol#14) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [StdUtils.multicall](lib/forge-std/src/StdUtils.sol#L14) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdUtils.sol"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "16d86d040f19dd0cc014e38c65714de468517a273f4b0d41c5f0fb5e81d32be1"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter stdStorage.sig(StdStorage,bytes4)._sig (lib/forge-std/src/StdStorage.sol#210) is not in mixedCase\n",
            "markdown": "Parameter [stdStorage.sig(StdStorage,bytes4)._sig](lib/forge-std/src/StdStorage.sol#L210) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStorage.sol"
                },
                "region": {
                  "startLine": 210,
                  "endLine": 210
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1775061686060500351382491fa7c3c7e3748bf76a79a684ec51d5d8241a1c5f"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant stdJson.vm (lib/forge-std/src/StdJson.sol#30) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [stdJson.vm](lib/forge-std/src/StdJson.sol#L30) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdJson.sol"
                },
                "region": {
                  "startLine": 30,
                  "endLine": 30
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1c066359239adfee1e765f84b8d894e97c8d800c3e668d3f4777432258fad5ab"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Event StdAssertions.log_array(address[]) (lib/forge-std/src/StdAssertions.sol#10) is not in CapWords\n",
            "markdown": "Event [StdAssertions.log_array(address[])](lib/forge-std/src/StdAssertions.sol#L10) is not in CapWords\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdAssertions.sol"
                },
                "region": {
                  "startLine": 10,
                  "endLine": 10
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1c129a335ed729fe71b20837724f906322c080032060dd04b8b2ef272da16feb"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Contract console2 (lib/forge-std/src/console2.sol#9-1559) is not in CapWords\n",
            "markdown": "Contract [console2](lib/forge-std/src/console2.sol#L9-L1559) is not in CapWords\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/console2.sol"
                },
                "region": {
                  "startLine": 9,
                  "endLine": 1559
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1efa180d6f81fadd0a018fc81ca2d831d5dfabcff5226abe44d85ee3c081e772"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant StdCheatsSafe.vm (lib/forge-std/src/StdCheats.sol#11) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [StdCheatsSafe.vm](lib/forge-std/src/StdCheats.sol#L11) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdCheats.sol"
                },
                "region": {
                  "startLine": 11,
                  "endLine": 11
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "25f3ced137d1ab678bd87a36c809146e2cd925f2b66e7a5e3c513f94b2e8a350"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function stdStorage.checked_write(StdStorage,bool) (lib/forge-std/src/StdStorage.sol#242-249) is not in mixedCase\n",
            "markdown": "Function [stdStorage.checked_write(StdStorage,bool)](lib/forge-std/src/StdStorage.sol#L242-L249) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStorage.sol"
                },
                "region": {
                  "startLine": 242,
                  "endLine": 249
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "27614341e7cddb8df2848a07192055a43a1f6231c9751b5bfc6862517a116f48"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function stdStorageSafe.read_bytes32(StdStorage) (lib/forge-std/src/StdStorage.sol#148-150) is not in mixedCase\n",
            "markdown": "Function [stdStorageSafe.read_bytes32(StdStorage)](lib/forge-std/src/StdStorage.sol#L148-L150) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStorage.sol"
                },
                "region": {
                  "startLine": 148,
                  "endLine": 150
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3831708a5a0842622ffd9da7b2019483e4b129865c56a347d1c9d3d0cc7c6a0e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function stdStorage.with_key(StdStorage,bytes32) (lib/forge-std/src/StdStorage.sol#226-228) is not in mixedCase\n",
            "markdown": "Function [stdStorage.with_key(StdStorage,bytes32)](lib/forge-std/src/StdStorage.sol#L226-L228) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStorage.sol"
                },
                "region": {
                  "startLine": 226,
                  "endLine": 228
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3e0c2e03adb17d35c35f31606e542da7ac6e3b51d31a1a1074d6cbb36e7a01f1"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function stdStorage.read_uint(StdStorage) (lib/forge-std/src/StdStorage.sol#295-297) is not in mixedCase\n",
            "markdown": "Function [stdStorage.read_uint(StdStorage)](lib/forge-std/src/StdStorage.sol#L295-L297) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStorage.sol"
                },
                "region": {
                  "startLine": 295,
                  "endLine": 297
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "41f0c045039b8d0e240425fc032109ff3ee77859e526bfba6c6a59d2bc533dc6"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Event DSTest.log_named_decimal_int(string,int256,uint256) (lib/forge-std/lib/ds-test/src/test.sol#31) is not in CapWords\n",
            "markdown": "Event [DSTest.log_named_decimal_int(string,int256,uint256)](lib/forge-std/lib/ds-test/src/test.sol#L31) is not in CapWords\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/lib/ds-test/src/test.sol"
                },
                "region": {
                  "startLine": 31,
                  "endLine": 31
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4263d1f4dc19508c01f7b1a108a05c758f6057446a37948451d431827e020f59"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Event DSTest.log_named_bytes(string,bytes) (lib/forge-std/lib/ds-test/src/test.sol#35) is not in CapWords\n",
            "markdown": "Event [DSTest.log_named_bytes(string,bytes)](lib/forge-std/lib/ds-test/src/test.sol#L35) is not in CapWords\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/lib/ds-test/src/test.sol"
                },
                "region": {
                  "startLine": 35,
                  "endLine": 35
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "44582a41172fb5f3d62630f2040d24ea95f262e1554e0bc25907bcbaab0ba948"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant StdCheats.vm (lib/forge-std/src/StdCheats.sol#526) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [StdCheats.vm](lib/forge-std/src/StdCheats.sol#L526) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdCheats.sol"
                },
                "region": {
                  "startLine": 526,
                  "endLine": 526
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "455c1d5f147dd3fd7ef1fe852f04d0707b48baa83116c7770a9ff156d8a128bd"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function stdStorageSafe.read_address(StdStorage) (lib/forge-std/src/StdStorage.sol#159-161) is not in mixedCase\n",
            "markdown": "Function [stdStorageSafe.read_address(StdStorage)](lib/forge-std/src/StdStorage.sol#L159-L161) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStorage.sol"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 161
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4b8696bcbd318dca3cbb51532c652f32c4cd3790c14eb56aec097f90c7817107"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter stdStorage.depth(StdStorage,uint256)._depth (lib/forge-std/src/StdStorage.sol#230) is not in mixedCase\n",
            "markdown": "Parameter [stdStorage.depth(StdStorage,uint256)._depth](lib/forge-std/src/StdStorage.sol#L230) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStorage.sol"
                },
                "region": {
                  "startLine": 230,
                  "endLine": 230
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4c8abe3fda3f36a4702818accc33d15bb47fe54ac8bd7c2d5722d4dd88d4c00a"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Event StdAssertions.log_array(uint256[]) (lib/forge-std/src/StdAssertions.sol#8) is not in CapWords\n",
            "markdown": "Event [StdAssertions.log_array(uint256[])](lib/forge-std/src/StdAssertions.sol#L8) is not in CapWords\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdAssertions.sol"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4ec7e6b730a7912b9cdd59da4e8d894702d19aabe5b5f0231323a81f371f55e5"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Event stdStorageSafe.WARNING_UninitedSlot(address,uint256) (lib/forge-std/src/StdStorage.sol#18) is not in CapWords\n",
            "markdown": "Event [stdStorageSafe.WARNING_UninitedSlot(address,uint256)](lib/forge-std/src/StdStorage.sol#L18) is not in CapWords\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStorage.sol"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 18
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "54c395bea332a7c6207e7ec5ed16ef002e17056619b35199476d0907f2701e96"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Contract console (lib/forge-std/src/console.sol#4-1534) is not in CapWords\n",
            "markdown": "Contract [console](lib/forge-std/src/console.sol#L4-L1534) is not in CapWords\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/console.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 1534
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "58c9dacc35a1219332b8b6ce561daac5384e938b9878894ede5d6cbaa444d455"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function stdStorage.read_int(StdStorage) (lib/forge-std/src/StdStorage.sol#299-301) is not in mixedCase\n",
            "markdown": "Function [stdStorage.read_int(StdStorage)](lib/forge-std/src/StdStorage.sol#L299-L301) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStorage.sol"
                },
                "region": {
                  "startLine": 299,
                  "endLine": 301
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5c997ab846c959b4f193e8808ac055079f564a672d907f4f0ed8241c246de2e7"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant StdChains.vm (lib/forge-std/src/StdChains.sol#37) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [StdChains.vm](lib/forge-std/src/StdChains.sol#L37) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdChains.sol"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 37
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "61c6e5ccf7f33db911af013eff50d3d07f0cfe0894e2c776e53d3af23f78e658"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Event DSTest.log_uint(uint256) (lib/forge-std/lib/ds-test/src/test.sol#25) is not in CapWords\n",
            "markdown": "Event [DSTest.log_uint(uint256)](lib/forge-std/lib/ds-test/src/test.sol#L25) is not in CapWords\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/lib/ds-test/src/test.sol"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 25
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "62fc6a23fcf7590be2bfdd0daa2684083b816cc7a33cf0bad5645595aed3d129"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Event DSTest.log_named_bytes32(string,bytes32) (lib/forge-std/lib/ds-test/src/test.sol#30) is not in CapWords\n",
            "markdown": "Event [DSTest.log_named_bytes32(string,bytes32)](lib/forge-std/lib/ds-test/src/test.sol#L30) is not in CapWords\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/lib/ds-test/src/test.sol"
                },
                "region": {
                  "startLine": 30,
                  "endLine": 30
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "630bd8b2aa1401c5d73608ff8e6184a86c3dae383de7db4be3a3d024bcbeaed6"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Event DSTest.log_named_decimal_uint(string,uint256,uint256) (lib/forge-std/lib/ds-test/src/test.sol#32) is not in CapWords\n",
            "markdown": "Event [DSTest.log_named_decimal_uint(string,uint256,uint256)](lib/forge-std/lib/ds-test/src/test.sol#L32) is not in CapWords\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/lib/ds-test/src/test.sol"
                },
                "region": {
                  "startLine": 32,
                  "endLine": 32
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "66742fe1fc677bd52b02a8e207b266164297ae0ce4872584ecd32773c7a16ebb"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function stdStorage.checked_write(StdStorage,address) (lib/forge-std/src/StdStorage.sol#234-236) is not in mixedCase\n",
            "markdown": "Function [stdStorage.checked_write(StdStorage,address)](lib/forge-std/src/StdStorage.sol#L234-L236) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStorage.sol"
                },
                "region": {
                  "startLine": 234,
                  "endLine": 236
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "673a1735ac09b27d9f12674687bafc605225cde506d7feda2c3fd34f6a4f4ce2"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function stdStorage.read_bool(StdStorage) (lib/forge-std/src/StdStorage.sol#287-289) is not in mixedCase\n",
            "markdown": "Function [stdStorage.read_bool(StdStorage)](lib/forge-std/src/StdStorage.sol#L287-L289) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStorage.sol"
                },
                "region": {
                  "startLine": 287,
                  "endLine": 289
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6b4998eef03aff6d584f229c98498cdd32499113c74196d100d71d06666f94dd"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Event DSTest.log_int(int256) (lib/forge-std/lib/ds-test/src/test.sol#24) is not in CapWords\n",
            "markdown": "Event [DSTest.log_int(int256)](lib/forge-std/lib/ds-test/src/test.sol#L24) is not in CapWords\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/lib/ds-test/src/test.sol"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 24
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "734058e24e7c63ec30845fb95cf16298acd4f804870d0a11ca929c4ea3769535"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Event DSTest.log_address(address) (lib/forge-std/lib/ds-test/src/test.sol#22) is not in CapWords\n",
            "markdown": "Event [DSTest.log_address(address)](lib/forge-std/lib/ds-test/src/test.sol#L22) is not in CapWords\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/lib/ds-test/src/test.sol"
                },
                "region": {
                  "startLine": 22,
                  "endLine": 22
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "74117eecaf14d309bd8615dd043ca6d34de942fcc4426cf0f5e98c6f4aa5f006"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Event DSTest.log_named_string(string,string) (lib/forge-std/lib/ds-test/src/test.sol#36) is not in CapWords\n",
            "markdown": "Event [DSTest.log_named_string(string,string)](lib/forge-std/lib/ds-test/src/test.sol#L36) is not in CapWords\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/lib/ds-test/src/test.sol"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 36
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "74afc669426a3efb65e3d2f179c24e68d8dfa26e5e1854e822074259045d5b24"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Contract stdStorage (lib/forge-std/src/StdStorage.sol#195-327) is not in CapWords\n",
            "markdown": "Contract [stdStorage](lib/forge-std/src/StdStorage.sol#L195-L327) is not in CapWords\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStorage.sol"
                },
                "region": {
                  "startLine": 195,
                  "endLine": 327
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "76f3a7e21e4829a2ced00529a1a2e5507827c8be0e24a812e45609c1f076e89d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Contract stdJson (lib/forge-std/src/StdJson.sol#29-179) is not in CapWords\n",
            "markdown": "Contract [stdJson](lib/forge-std/src/StdJson.sol#L29-L179) is not in CapWords\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdJson.sol"
                },
                "region": {
                  "startLine": 29,
                  "endLine": 179
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "79e471eaa30ff9a4949f13483d3e97f5207c8834c060c9166d72383eadbcafe5"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant stdStorageSafe.vm (lib/forge-std/src/StdStorage.sol#20) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [stdStorageSafe.vm](lib/forge-std/src/StdStorage.sol#L20) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStorage.sol"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "81fa9907ec9106b63675aea03d22d2135eb038a3aaf91d07ab096303a194ece4"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant StdStyle.vm (lib/forge-std/src/StdStyle.sol#7) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [StdStyle.vm](lib/forge-std/src/StdStyle.sol#L7) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStyle.sol"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "86093be216cc85114ee9f22819baa221f2c972369d78ef216fe0bfc9436a7d54"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant stdStorage.vm (lib/forge-std/src/StdStorage.sol#196) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [stdStorage.vm](lib/forge-std/src/StdStorage.sol#L196) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStorage.sol"
                },
                "region": {
                  "startLine": 196,
                  "endLine": 196
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8a0a3ff320e9ae30b5edad49aaa049ffc51263ab541b838aa058542d8364bcc6"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant ScriptBase.vmSafe (lib/forge-std/src/Base.sol#34) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [ScriptBase.vmSafe](lib/forge-std/src/Base.sol#L34) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/Base.sol"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8b6efc87d9427620e1a8a696d72e0130aef3e6229c99492487d1b8609e5e0190"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function stdStorage.with_key(StdStorage,address) (lib/forge-std/src/StdStorage.sol#218-220) is not in mixedCase\n",
            "markdown": "Function [stdStorage.with_key(StdStorage,address)](lib/forge-std/src/StdStorage.sol#L218-L220) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStorage.sol"
                },
                "region": {
                  "startLine": 218,
                  "endLine": 220
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "91197e6ffefef61349044b9c3511738622067514acf09d7ce4f72b8470839103"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function stdStorage.checked_write(StdStorage,uint256) (lib/forge-std/src/StdStorage.sol#238-240) is not in mixedCase\n",
            "markdown": "Function [stdStorage.checked_write(StdStorage,uint256)](lib/forge-std/src/StdStorage.sol#L238-L240) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStorage.sol"
                },
                "region": {
                  "startLine": 238,
                  "endLine": 240
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "92340f56fca5f281479bc8ba4df65b1ab5d07a41e26449c640877b0aa9395fb6"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Contract stdStorageSafe (lib/forge-std/src/StdStorage.sol#16-193) is not in CapWords\n",
            "markdown": "Contract [stdStorageSafe](lib/forge-std/src/StdStorage.sol#L16-L193) is not in CapWords\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStorage.sol"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 193
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "95130d096c24ec4c10b6116687325fbddda2ea00c5cca424b487cffb52c6d210"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function stdStorageSafe.with_key(StdStorage,address) (lib/forge-std/src/StdStorage.sol#122-125) is not in mixedCase\n",
            "markdown": "Function [stdStorageSafe.with_key(StdStorage,address)](lib/forge-std/src/StdStorage.sol#L122-L125) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStorage.sol"
                },
                "region": {
                  "startLine": 122,
                  "endLine": 125
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9dfdc4172ebc7f406ce4bad9cb817d31c66d00afac35e691c2368cf8e7a532fe"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Contract stdMath (lib/forge-std/src/StdMath.sol#4-43) is not in CapWords\n",
            "markdown": "Contract [stdMath](lib/forge-std/src/StdMath.sol#L4-L43) is not in CapWords\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdMath.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 43
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a110b8c73769d0bae602f3d7185562db77772c61b7d5b90cb1b6575ffc4da0a7"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Contract stdError (lib/forge-std/src/StdError.sol#5-15) is not in CapWords\n",
            "markdown": "Contract [stdError](lib/forge-std/src/StdError.sol#L5-L15) is not in CapWords\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdError.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 15
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a641b1cbf74b9437858517c81c431b6cf0716b727d4d8f2236f867f1f5bc2345"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Event DSTest.log_named_uint(string,uint256) (lib/forge-std/lib/ds-test/src/test.sol#34) is not in CapWords\n",
            "markdown": "Event [DSTest.log_named_uint(string,uint256)](lib/forge-std/lib/ds-test/src/test.sol#L34) is not in CapWords\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/lib/ds-test/src/test.sol"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "aa18c7de9c11717e81c27b3673fd539a452a2e1a2c7a414677a7b91c7684c4cc"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter stdStorageSafe.depth(StdStorage,uint256)._depth (lib/forge-std/src/StdStorage.sol#137) is not in mixedCase\n",
            "markdown": "Parameter [stdStorageSafe.depth(StdStorage,uint256)._depth](lib/forge-std/src/StdStorage.sol#L137) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStorage.sol"
                },
                "region": {
                  "startLine": 137,
                  "endLine": 137
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ab9315c67a3910f3aa0b802cd184129b67d555fcbf2c76c3e169b209971faec1"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Event DSTest.log_bytes(bytes) (lib/forge-std/lib/ds-test/src/test.sol#26) is not in CapWords\n",
            "markdown": "Event [DSTest.log_bytes(bytes)](lib/forge-std/lib/ds-test/src/test.sol#L26) is not in CapWords\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/lib/ds-test/src/test.sol"
                },
                "region": {
                  "startLine": 26,
                  "endLine": 26
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ac906fbc264f441d79432c811089aa3047f118edaa87168068ea60268d202889"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function stdStorage.read_address(StdStorage) (lib/forge-std/src/StdStorage.sol#291-293) is not in mixedCase\n",
            "markdown": "Function [stdStorage.read_address(StdStorage)](lib/forge-std/src/StdStorage.sol#L291-L293) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStorage.sol"
                },
                "region": {
                  "startLine": 291,
                  "endLine": 293
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "af1afcb1cd6ab09d3ff1ec27edabb0529b6d050a404c61831ce641c27034a335"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter stdStorageSafe.target(StdStorage,address)._target (lib/forge-std/src/StdStorage.sol#107) is not in mixedCase\n",
            "markdown": "Parameter [stdStorageSafe.target(StdStorage,address)._target](lib/forge-std/src/StdStorage.sol#L107) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStorage.sol"
                },
                "region": {
                  "startLine": 107,
                  "endLine": 107
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b482da095f1b57a970e284008bded1482c92c7e0bcfd2dd755c13fb5e25282ef"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Event DSTest.log_string(string) (lib/forge-std/lib/ds-test/src/test.sol#27) is not in CapWords\n",
            "markdown": "Event [DSTest.log_string(string)](lib/forge-std/lib/ds-test/src/test.sol#L27) is not in CapWords\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/lib/ds-test/src/test.sol"
                },
                "region": {
                  "startLine": 27,
                  "endLine": 27
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bddf0f8b6aed8bea0cbbcd5778e9772c7f759cc2824439103e7bbe185fe42cc8"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant StdUtils.vm (lib/forge-std/src/StdUtils.sol#15) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [StdUtils.vm](lib/forge-std/src/StdUtils.sol#L15) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdUtils.sol"
                },
                "region": {
                  "startLine": 15,
                  "endLine": 15
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c311ace69725230ef95d0939655bf4938029bfca527d2edd19075faca4353053"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Event StdAssertions.log_array(int256[]) (lib/forge-std/src/StdAssertions.sol#9) is not in CapWords\n",
            "markdown": "Event [StdAssertions.log_array(int256[])](lib/forge-std/src/StdAssertions.sol#L9) is not in CapWords\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdAssertions.sol"
                },
                "region": {
                  "startLine": 9,
                  "endLine": 9
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c3fe689e3102d1e55baadb4e5e5442234cb0a60bdd5d377b6e84cb3d1ce8d521"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function stdStorageSafe.with_key(StdStorage,uint256) (lib/forge-std/src/StdStorage.sol#127-130) is not in mixedCase\n",
            "markdown": "Function [stdStorageSafe.with_key(StdStorage,uint256)](lib/forge-std/src/StdStorage.sol#L127-L130) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStorage.sol"
                },
                "region": {
                  "startLine": 127,
                  "endLine": 130
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c46e303715783c324d4461dbe483a7b3aa1c9df97599b89c13c27704da95a397"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Event StdAssertions.log_named_array(string,int256[]) (lib/forge-std/src/StdAssertions.sol#12) is not in CapWords\n",
            "markdown": "Event [StdAssertions.log_named_array(string,int256[])](lib/forge-std/src/StdAssertions.sol#L12) is not in CapWords\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdAssertions.sol"
                },
                "region": {
                  "startLine": 12,
                  "endLine": 12
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c5b42c406c8725224b19fb5156d01da28aa8c55a061dead76f8697d5230d8bee"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter stdStorageSafe.sig(StdStorage,string)._sig (lib/forge-std/src/StdStorage.sol#117) is not in mixedCase\n",
            "markdown": "Parameter [stdStorageSafe.sig(StdStorage,string)._sig](lib/forge-std/src/StdStorage.sol#L117) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStorage.sol"
                },
                "region": {
                  "startLine": 117,
                  "endLine": 117
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c9db2becb96049bb96f9145ec0872f8bf85d928236b39f585d2a16aa30a91b24"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function stdStorageSafe.read_bool(StdStorage) (lib/forge-std/src/StdStorage.sol#152-157) is not in mixedCase\n",
            "markdown": "Function [stdStorageSafe.read_bool(StdStorage)](lib/forge-std/src/StdStorage.sol#L152-L157) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStorage.sol"
                },
                "region": {
                  "startLine": 152,
                  "endLine": 157
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cd22b731353a9fc3d94f306b1d0e5b973b172da7330ccc5a77a6476108119a21"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Event DSTest.log(string) (lib/forge-std/lib/ds-test/src/test.sol#19) is not in CapWords\n",
            "markdown": "Event [DSTest.log(string)](lib/forge-std/lib/ds-test/src/test.sol#L19) is not in CapWords\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/lib/ds-test/src/test.sol"
                },
                "region": {
                  "startLine": 19,
                  "endLine": 19
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cd41b025ef8cfc7c704363d324cd4ba244bf6f9b0cb05d1843f974a0a25b0599"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Event DSTest.log_bytes32(bytes32) (lib/forge-std/lib/ds-test/src/test.sol#23) is not in CapWords\n",
            "markdown": "Event [DSTest.log_bytes32(bytes32)](lib/forge-std/lib/ds-test/src/test.sol#L23) is not in CapWords\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/lib/ds-test/src/test.sol"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 23
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d089ed26232c0b6682f21d50a4843343bbdb11ccdf91315cff6cd8aa70062ac5"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function stdStorageSafe.with_key(StdStorage,bytes32) (lib/forge-std/src/StdStorage.sol#132-135) is not in mixedCase\n",
            "markdown": "Function [stdStorageSafe.with_key(StdStorage,bytes32)](lib/forge-std/src/StdStorage.sol#L132-L135) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStorage.sol"
                },
                "region": {
                  "startLine": 132,
                  "endLine": 135
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d942098e9db9f36f89b647c642b32f1ed5f3e2cc1e159c9d1b00feff3883b484"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Event DSTest.log_named_address(string,address) (lib/forge-std/lib/ds-test/src/test.sol#29) is not in CapWords\n",
            "markdown": "Event [DSTest.log_named_address(string,address)](lib/forge-std/lib/ds-test/src/test.sol#L29) is not in CapWords\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/lib/ds-test/src/test.sol"
                },
                "region": {
                  "startLine": 29,
                  "endLine": 29
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d952c0b21d7915bc44553e4c5f3909cbe87c00ee1df7ddd11bcde414ffcbf4e8"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant CommonBase.vm (lib/forge-std/src/Base.sol#27) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [CommonBase.vm](lib/forge-std/src/Base.sol#L27) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/Base.sol"
                },
                "region": {
                  "startLine": 27,
                  "endLine": 27
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "de0bb4e42c355a968bf9578dff2eace9f478927dbf494c65d972baf1c4527670"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Modifier DSTest.logs_gas() (lib/forge-std/lib/ds-test/src/test.sol#86-91) is not in mixedCase\n",
            "markdown": "Modifier [DSTest.logs_gas()](lib/forge-std/lib/ds-test/src/test.sol#L86-L91) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/lib/ds-test/src/test.sol"
                },
                "region": {
                  "startLine": 86,
                  "endLine": 91
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "dfe8749eac5f9a821f7a401a316699900e97c4f97a0ec6f3fc189791214be095"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable DSTest.IS_TEST (lib/forge-std/lib/ds-test/src/test.sol#38) is not in mixedCase\n",
            "markdown": "Variable [DSTest.IS_TEST](lib/forge-std/lib/ds-test/src/test.sol#L38) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/lib/ds-test/src/test.sol"
                },
                "region": {
                  "startLine": 38,
                  "endLine": 38
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e75e0d3f01c1a3cfd72aa3c982deb6a183f0e0375292a1d4a034213c4ae43066"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function StdUtils.console2_log(string,uint256) (lib/forge-std/src/StdUtils.sol#189-192) is not in mixedCase\n",
            "markdown": "Function [StdUtils.console2_log(string,uint256)](lib/forge-std/src/StdUtils.sol#L189-L192) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdUtils.sol"
                },
                "region": {
                  "startLine": 189,
                  "endLine": 192
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f014bd6a92984b0675d4c8e3471c99f8ee95ccea225ef7cf1aff39139cc6e58c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable SimpleStore._value (test/mock/Counter.sol#4) is not in mixedCase\n",
            "markdown": "Variable [SimpleStore._value](test/mock/Counter.sol#L4) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/mock/Counter.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f44e763b56230122b0fac2c2bd141ca16ab28d666c5d2f02d00c8a2a9669b452"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function stdStorage.with_key(StdStorage,uint256) (lib/forge-std/src/StdStorage.sol#222-224) is not in mixedCase\n",
            "markdown": "Function [stdStorage.with_key(StdStorage,uint256)](lib/forge-std/src/StdStorage.sol#L222-L224) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStorage.sol"
                },
                "region": {
                  "startLine": 222,
                  "endLine": 224
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f5c30ddfcb3d783afc2ba61c408176a888f19dcddb6c6d1faf76255cc64c2b9c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function stdStorage.read_bytes32(StdStorage) (lib/forge-std/src/StdStorage.sol#283-285) is not in mixedCase\n",
            "markdown": "Function [stdStorage.read_bytes32(StdStorage)](lib/forge-std/src/StdStorage.sol#L283-L285) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdStorage.sol"
                },
                "region": {
                  "startLine": 283,
                  "endLine": 285
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f811e9b89c194976792c64397cf419af54a81ace1bee4667b18c8db1f75d17eb"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Event StdAssertions.log_named_array(string,address[]) (lib/forge-std/src/StdAssertions.sol#13) is not in CapWords\n",
            "markdown": "Event [StdAssertions.log_named_array(string,address[])](lib/forge-std/src/StdAssertions.sol#L13) is not in CapWords\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdAssertions.sol"
                },
                "region": {
                  "startLine": 13,
                  "endLine": 13
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f8cfee6078d40c277633b0ef1087f94cc04f947034debcf33a30262a09c7e5e2"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Event StdAssertions.log_named_array(string,uint256[]) (lib/forge-std/src/StdAssertions.sol#11) is not in CapWords\n",
            "markdown": "Event [StdAssertions.log_named_array(string,uint256[])](lib/forge-std/src/StdAssertions.sol#L11) is not in CapWords\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdAssertions.sol"
                },
                "region": {
                  "startLine": 11,
                  "endLine": 11
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f92d23c3a7218abadd03a1f356ca4b54174f3f77561215b660411059afe87ddb"
          }
        },
        {
          "ruleId": "3-0-redundant-statements",
          "message": {
            "text": "Redundant expression \"status (lib/forge-std/src/StdUtils.sol#191)\" inStdUtils (lib/forge-std/src/StdUtils.sol#9-198)\n",
            "markdown": "Redundant expression \"[status](lib/forge-std/src/StdUtils.sol#L191)\" in[StdUtils](lib/forge-std/src/StdUtils.sol#L9-L198)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdUtils.sol"
                },
                "region": {
                  "startLine": 191,
                  "endLine": 191
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8a19838cc4a573e086e6216dfa7eb2ac5ea0df172011b8bdf640b0c6924c5177"
          }
        },
        {
          "ruleId": "3-0-redundant-statements",
          "message": {
            "text": "Redundant expression \"status (lib/forge-std/lib/ds-test/src/test.sol#73)\" inDSTest (lib/forge-std/lib/ds-test/src/test.sol#18-592)\n",
            "markdown": "Redundant expression \"[status](lib/forge-std/lib/ds-test/src/test.sol#L73)\" in[DSTest](lib/forge-std/lib/ds-test/src/test.sol#L18-L592)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/lib/ds-test/src/test.sol"
                },
                "region": {
                  "startLine": 73,
                  "endLine": 73
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d3f7817791e2b5211cd4c0f2e85cbbba255bac0b038ed7cf77da467bfa954536"
          }
        },
        {
          "ruleId": "3-0-redundant-statements",
          "message": {
            "text": "Redundant expression \"status (lib/forge-std/src/StdUtils.sol#196)\" inStdUtils (lib/forge-std/src/StdUtils.sol#9-198)\n",
            "markdown": "Redundant expression \"[status](lib/forge-std/src/StdUtils.sol#L196)\" in[StdUtils](lib/forge-std/src/StdUtils.sol#L9-L198)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdUtils.sol"
                },
                "region": {
                  "startLine": 196,
                  "endLine": 196
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f6b6d1b4870fd6a3b487d058b1fca12b17d35f52aadba02a7ca2ae65d2b1156e"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable Vm.expectEmit(bool,bool,bool,bool).checkTopic1 (lib/forge-std/src/Vm.sol#403) is too similar to Vm.expectEmit(bool,bool,bool,bool).checkTopic3 (lib/forge-std/src/Vm.sol#403)\n",
            "markdown": "Variable [Vm.expectEmit(bool,bool,bool,bool).checkTopic1](lib/forge-std/src/Vm.sol#L403) is too similar to [Vm.expectEmit(bool,bool,bool,bool).checkTopic3](lib/forge-std/src/Vm.sol#L403)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/Vm.sol"
                },
                "region": {
                  "startLine": 403,
                  "endLine": 403
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "076ddca1b94bd1540662b49b8efa1d51205e8a5547ce8e6213792c53d35ab29a"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable Vm.expectEmit(bool,bool,bool,bool).checkTopic2 (lib/forge-std/src/Vm.sol#403) is too similar to Vm.expectEmit(bool,bool,bool,bool).checkTopic3 (lib/forge-std/src/Vm.sol#403)\n",
            "markdown": "Variable [Vm.expectEmit(bool,bool,bool,bool).checkTopic2](lib/forge-std/src/Vm.sol#L403) is too similar to [Vm.expectEmit(bool,bool,bool,bool).checkTopic3](lib/forge-std/src/Vm.sol#L403)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/Vm.sol"
                },
                "region": {
                  "startLine": 403,
                  "endLine": 403
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "16f347d1da4fb8909245adbf58a8dbf6e78174a3ec82091d1e6d22e49d682ff3"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable StdInvariant._excludedSenders (lib/forge-std/src/StdInvariant.sol#13) is too similar to StdInvariant.excludeSenders().excludedSenders_ (lib/forge-std/src/StdInvariant.sol#69)\n",
            "markdown": "Variable [StdInvariant._excludedSenders](lib/forge-std/src/StdInvariant.sol#L13) is too similar to [StdInvariant.excludeSenders().excludedSenders_](lib/forge-std/src/StdInvariant.sol#L69)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdInvariant.sol"
                },
                "region": {
                  "startLine": 13,
                  "endLine": 13
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1919ec9ec228829023f39927f2328ded5835581ff8a9317e990822ca1baba326"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable Vm.expectEmit(bool,bool,bool,bool,address).checkTopic1 (lib/forge-std/src/Vm.sol#404) is too similar to Vm.expectEmit(bool,bool,bool,bool,address).checkTopic2 (lib/forge-std/src/Vm.sol#404)\n",
            "markdown": "Variable [Vm.expectEmit(bool,bool,bool,bool,address).checkTopic1](lib/forge-std/src/Vm.sol#L404) is too similar to [Vm.expectEmit(bool,bool,bool,bool,address).checkTopic2](lib/forge-std/src/Vm.sol#L404)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/Vm.sol"
                },
                "region": {
                  "startLine": 404,
                  "endLine": 404
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "192e26ec19dd3df285271fd0c485f587ec1937f16ae0d7ec520be41694eea669"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable StdInvariant._targetedContracts (lib/forge-std/src/StdInvariant.sol#14) is too similar to StdInvariant.targetContracts().targetedContracts_ (lib/forge-std/src/StdInvariant.sol#81)\n",
            "markdown": "Variable [StdInvariant._targetedContracts](lib/forge-std/src/StdInvariant.sol#L14) is too similar to [StdInvariant.targetContracts().targetedContracts_](lib/forge-std/src/StdInvariant.sol#L81)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdInvariant.sol"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1f86de758e3067d65508b9b6b85b4f0ec364adc57c280fffa6ce6beb10859daa"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable StdInvariant._targetedArtifacts (lib/forge-std/src/StdInvariant.sol#18) is too similar to StdInvariant.targetArtifacts().targetedArtifacts_ (lib/forge-std/src/StdInvariant.sol#73)\n",
            "markdown": "Variable [StdInvariant._targetedArtifacts](lib/forge-std/src/StdInvariant.sol#L18) is too similar to [StdInvariant.targetArtifacts().targetedArtifacts_](lib/forge-std/src/StdInvariant.sol#L73)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdInvariant.sol"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 18
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "27863e04b500b07d750fdc8a3d1be8d333a61b39db9630a406b02b5be06fee80"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable StdInvariant._targetedSenders (lib/forge-std/src/StdInvariant.sol#15) is too similar to StdInvariant.targetSenders().targetedSenders_ (lib/forge-std/src/StdInvariant.sol#89)\n",
            "markdown": "Variable [StdInvariant._targetedSenders](lib/forge-std/src/StdInvariant.sol#L15) is too similar to [StdInvariant.targetSenders().targetedSenders_](lib/forge-std/src/StdInvariant.sol#L89)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdInvariant.sol"
                },
                "region": {
                  "startLine": 15,
                  "endLine": 15
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4abc1ade6e107cd841816c0445003f88fc372da58e5a2d8aef4befd23e889436"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable Vm.expectEmit(bool,bool,bool,bool,address).checkTopic1 (lib/forge-std/src/Vm.sol#404) is too similar to Vm.expectEmit(bool,bool,bool,bool,address).checkTopic3 (lib/forge-std/src/Vm.sol#404)\n",
            "markdown": "Variable [Vm.expectEmit(bool,bool,bool,bool,address).checkTopic1](lib/forge-std/src/Vm.sol#L404) is too similar to [Vm.expectEmit(bool,bool,bool,bool,address).checkTopic3](lib/forge-std/src/Vm.sol#L404)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/Vm.sol"
                },
                "region": {
                  "startLine": 404,
                  "endLine": 404
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5aeb30caeafc477972a7e02269576db17511e3f4564614cd62ee965527383f8d"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable Vm.expectEmit(bool,bool,bool,bool).checkTopic2 (lib/forge-std/src/Vm.sol#403) is too similar to Vm.expectEmit(bool,bool,bool,bool,address).checkTopic3 (lib/forge-std/src/Vm.sol#404)\n",
            "markdown": "Variable [Vm.expectEmit(bool,bool,bool,bool).checkTopic2](lib/forge-std/src/Vm.sol#L403) is too similar to [Vm.expectEmit(bool,bool,bool,bool,address).checkTopic3](lib/forge-std/src/Vm.sol#L404)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/Vm.sol"
                },
                "region": {
                  "startLine": 403,
                  "endLine": 403
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6454387260c6ab2fde86a7533a4b0094a12fef582bba23b555dc4077252f7bd9"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable StdAssertions.assertEqCall(address,bytes,address,bytes,bool).returnDataA (lib/forge-std/src/StdAssertions.sol#351) is too similar to StdAssertions.assertEqCall(address,bytes,address,bytes,bool).returnDataB (lib/forge-std/src/StdAssertions.sol#352)\n",
            "markdown": "Variable [StdAssertions.assertEqCall(address,bytes,address,bytes,bool).returnDataA](lib/forge-std/src/StdAssertions.sol#L351) is too similar to [StdAssertions.assertEqCall(address,bytes,address,bytes,bool).returnDataB](lib/forge-std/src/StdAssertions.sol#L352)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdAssertions.sol"
                },
                "region": {
                  "startLine": 351,
                  "endLine": 351
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "94e62c1060d3475a62501a3c3bde0f56fe291723264fa25831045e59fc3e7e2b"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable StdInvariant._excludedContracts (lib/forge-std/src/StdInvariant.sol#12) is too similar to StdInvariant.excludeContracts().excludedContracts_ (lib/forge-std/src/StdInvariant.sol#65)\n",
            "markdown": "Variable [StdInvariant._excludedContracts](lib/forge-std/src/StdInvariant.sol#L12) is too similar to [StdInvariant.excludeContracts().excludedContracts_](lib/forge-std/src/StdInvariant.sol#L65)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdInvariant.sol"
                },
                "region": {
                  "startLine": 12,
                  "endLine": 12
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9f9017fa251f4c2a190055a27cff4c01485f972e44673bb1d5d3e6b85d8e202e"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable Vm.expectEmit(bool,bool,bool,bool).checkTopic1 (lib/forge-std/src/Vm.sol#403) is too similar to Vm.expectEmit(bool,bool,bool,bool,address).checkTopic3 (lib/forge-std/src/Vm.sol#404)\n",
            "markdown": "Variable [Vm.expectEmit(bool,bool,bool,bool).checkTopic1](lib/forge-std/src/Vm.sol#L403) is too similar to [Vm.expectEmit(bool,bool,bool,bool,address).checkTopic3](lib/forge-std/src/Vm.sol#L404)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/Vm.sol"
                },
                "region": {
                  "startLine": 403,
                  "endLine": 403
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a037435696904a9ff9f78cc01d8f982272252bd1bd5ecac108e27772876dfbfd"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable Vm.expectEmit(bool,bool,bool,bool).checkTopic1 (lib/forge-std/src/Vm.sol#403) is too similar to Vm.expectEmit(bool,bool,bool,bool).checkTopic2 (lib/forge-std/src/Vm.sol#403)\n",
            "markdown": "Variable [Vm.expectEmit(bool,bool,bool,bool).checkTopic1](lib/forge-std/src/Vm.sol#L403) is too similar to [Vm.expectEmit(bool,bool,bool,bool).checkTopic2](lib/forge-std/src/Vm.sol#L403)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/Vm.sol"
                },
                "region": {
                  "startLine": 403,
                  "endLine": 403
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b8e1cd33a4976f9e48df18061b155336b61a918b0824754b7974e29a59b76cdb"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable Vm.expectEmit(bool,bool,bool,bool,address).checkTopic1 (lib/forge-std/src/Vm.sol#404) is too similar to Vm.expectEmit(bool,bool,bool,bool).checkTopic2 (lib/forge-std/src/Vm.sol#403)\n",
            "markdown": "Variable [Vm.expectEmit(bool,bool,bool,bool,address).checkTopic1](lib/forge-std/src/Vm.sol#L404) is too similar to [Vm.expectEmit(bool,bool,bool,bool).checkTopic2](lib/forge-std/src/Vm.sol#L403)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/Vm.sol"
                },
                "region": {
                  "startLine": 404,
                  "endLine": 404
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c635365ef7fc5968bc4494ce1ff417c87284e141619c058e3c0d0ef5ad4ac445"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable Vm.expectEmit(bool,bool,bool,bool,address).checkTopic1 (lib/forge-std/src/Vm.sol#404) is too similar to Vm.expectEmit(bool,bool,bool,bool).checkTopic3 (lib/forge-std/src/Vm.sol#403)\n",
            "markdown": "Variable [Vm.expectEmit(bool,bool,bool,bool,address).checkTopic1](lib/forge-std/src/Vm.sol#L404) is too similar to [Vm.expectEmit(bool,bool,bool,bool).checkTopic3](lib/forge-std/src/Vm.sol#L403)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/Vm.sol"
                },
                "region": {
                  "startLine": 404,
                  "endLine": 404
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ca20c344d88966bdd2672464edb031979ed93e31136d47794c0a6ebc89715551"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable Vm.expectEmit(bool,bool,bool,bool,address).checkTopic2 (lib/forge-std/src/Vm.sol#404) is too similar to Vm.expectEmit(bool,bool,bool,bool,address).checkTopic3 (lib/forge-std/src/Vm.sol#404)\n",
            "markdown": "Variable [Vm.expectEmit(bool,bool,bool,bool,address).checkTopic2](lib/forge-std/src/Vm.sol#L404) is too similar to [Vm.expectEmit(bool,bool,bool,bool,address).checkTopic3](lib/forge-std/src/Vm.sol#L404)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/Vm.sol"
                },
                "region": {
                  "startLine": 404,
                  "endLine": 404
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cfcd89aae6ba770f52696bd06056ca47b1abbc17a33c6f7475888302f20b968c"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable StdInvariant._targetedArtifactSelectors (lib/forge-std/src/StdInvariant.sol#20) is too similar to StdInvariant.targetArtifactSelectors().targetedArtifactSelectors_ (lib/forge-std/src/StdInvariant.sol#77)\n",
            "markdown": "Variable [StdInvariant._targetedArtifactSelectors](lib/forge-std/src/StdInvariant.sol#L20) is too similar to [StdInvariant.targetArtifactSelectors().targetedArtifactSelectors_](lib/forge-std/src/StdInvariant.sol#L77)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdInvariant.sol"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d41e56d37ca36c35fd79e9181204c65d8f15774a123c2440b9c261911a15d693"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable StdInvariant._excludedArtifacts (lib/forge-std/src/StdInvariant.sol#17) is too similar to StdInvariant.excludeArtifacts().excludedArtifacts_ (lib/forge-std/src/StdInvariant.sol#61)\n",
            "markdown": "Variable [StdInvariant._excludedArtifacts](lib/forge-std/src/StdInvariant.sol#L17) is too similar to [StdInvariant.excludeArtifacts().excludedArtifacts_](lib/forge-std/src/StdInvariant.sol#L61)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdInvariant.sol"
                },
                "region": {
                  "startLine": 17,
                  "endLine": 17
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "dd9f0b09c579d80733660da20725d290584165dc2eabecef8e711ef8bc15d254"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable Vm.expectEmit(bool,bool,bool,bool).checkTopic1 (lib/forge-std/src/Vm.sol#403) is too similar to Vm.expectEmit(bool,bool,bool,bool,address).checkTopic2 (lib/forge-std/src/Vm.sol#404)\n",
            "markdown": "Variable [Vm.expectEmit(bool,bool,bool,bool).checkTopic1](lib/forge-std/src/Vm.sol#L403) is too similar to [Vm.expectEmit(bool,bool,bool,bool,address).checkTopic2](lib/forge-std/src/Vm.sol#L404)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/Vm.sol"
                },
                "region": {
                  "startLine": 403,
                  "endLine": 403
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e6988fc74094fb802916a60fa17be8d9e650d99920fb76e2a1b9e63a2721c6bf"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable StdInvariant._targetedSelectors (lib/forge-std/src/StdInvariant.sol#21) is too similar to StdInvariant.targetSelectors().targetedSelectors_ (lib/forge-std/src/StdInvariant.sol#85)\n",
            "markdown": "Variable [StdInvariant._targetedSelectors](lib/forge-std/src/StdInvariant.sol#L21) is too similar to [StdInvariant.targetSelectors().targetedSelectors_](lib/forge-std/src/StdInvariant.sol#L85)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/StdInvariant.sol"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 21
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ea4caf6255955dc99662cddb0c943b10e2b07bfe4c347608051929dc25a14921"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable Vm.expectEmit(bool,bool,bool,bool,address).checkTopic2 (lib/forge-std/src/Vm.sol#404) is too similar to Vm.expectEmit(bool,bool,bool,bool).checkTopic3 (lib/forge-std/src/Vm.sol#403)\n",
            "markdown": "Variable [Vm.expectEmit(bool,bool,bool,bool,address).checkTopic2](lib/forge-std/src/Vm.sol#L404) is too similar to [Vm.expectEmit(bool,bool,bool,bool).checkTopic3](lib/forge-std/src/Vm.sol#L403)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/Vm.sol"
                },
                "region": {
                  "startLine": 404,
                  "endLine": 404
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ffe8d55e75abb58327a1b9bf9029f145cd54d4d82d0295f94e469c1fac46e6f1"
          }
        },
        {
          "ruleId": "3-0-unused-state",
          "message": {
            "text": "CommonBase.SECP256K1_ORDER (lib/forge-std/src/Base.sol#21-22) is never used in TestBasicProxy (test/BasicCheck.t.sol#7-27)\n",
            "markdown": "[CommonBase.SECP256K1_ORDER](lib/forge-std/src/Base.sol#L21-L22) is never used in [TestBasicProxy](test/BasicCheck.t.sol#L7-L27)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/Base.sol"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 22
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "136556e2ed52ed8ad0a872f63bb30853e1dc68bbb1249315c4c391d4ad7bd83b"
          }
        },
        {
          "ruleId": "3-0-unused-state",
          "message": {
            "text": "CommonBase.CONSOLE (lib/forge-std/src/Base.sol#11) is never used in TestBasicProxy (test/BasicCheck.t.sol#7-27)\n",
            "markdown": "[CommonBase.CONSOLE](lib/forge-std/src/Base.sol#L11) is never used in [TestBasicProxy](test/BasicCheck.t.sol#L7-L27)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/Base.sol"
                },
                "region": {
                  "startLine": 11,
                  "endLine": 11
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2ab2af0bd41e67a69677629e1101bd1c55d4339858c07edc747eca2345852671"
          }
        },
        {
          "ruleId": "3-0-unused-state",
          "message": {
            "text": "CommonBase.vm (lib/forge-std/src/Base.sol#27) is never used in TestBasicProxy (test/BasicCheck.t.sol#7-27)\n",
            "markdown": "[CommonBase.vm](lib/forge-std/src/Base.sol#L27) is never used in [TestBasicProxy](test/BasicCheck.t.sol#L7-L27)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/Base.sol"
                },
                "region": {
                  "startLine": 27,
                  "endLine": 27
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "48414abd60a287c54748471fd1d59dfa37da71f6d6e2761707c5d08be0a4ec4c"
          }
        },
        {
          "ruleId": "3-0-unused-state",
          "message": {
            "text": "CommonBase.CREATE2_FACTORY (lib/forge-std/src/Base.sol#13) is never used in TestBasicProxy (test/BasicCheck.t.sol#7-27)\n",
            "markdown": "[CommonBase.CREATE2_FACTORY](lib/forge-std/src/Base.sol#L13) is never used in [TestBasicProxy](test/BasicCheck.t.sol#L7-L27)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/Base.sol"
                },
                "region": {
                  "startLine": 13,
                  "endLine": 13
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "548da853de10f754f6e5f755cb8c98ef4f3d41481a6a1d69e7f2bcaaaf09dca6"
          }
        },
        {
          "ruleId": "3-0-unused-state",
          "message": {
            "text": "CommonBase.MULTICALL3_ADDRESS (lib/forge-std/src/Base.sol#19) is never used in TestBasicProxy (test/BasicCheck.t.sol#7-27)\n",
            "markdown": "[CommonBase.MULTICALL3_ADDRESS](lib/forge-std/src/Base.sol#L19) is never used in [TestBasicProxy](test/BasicCheck.t.sol#L7-L27)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/Base.sol"
                },
                "region": {
                  "startLine": 19,
                  "endLine": 19
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "75647a13f70fc548c3d9122d44b3c6850906a1f4a9add5dd946cdc0a84af988d"
          }
        },
        {
          "ruleId": "3-0-unused-state",
          "message": {
            "text": "CommonBase.DEFAULT_SENDER (lib/forge-std/src/Base.sol#15) is never used in TestBasicProxy (test/BasicCheck.t.sol#7-27)\n",
            "markdown": "[CommonBase.DEFAULT_SENDER](lib/forge-std/src/Base.sol#L15) is never used in [TestBasicProxy](test/BasicCheck.t.sol#L7-L27)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/Base.sol"
                },
                "region": {
                  "startLine": 15,
                  "endLine": 15
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "956da38b83d0c7fa6ead9d7f69d79a3bda5177c0a5dc8881542fbc827b7e9562"
          }
        },
        {
          "ruleId": "3-0-unused-state",
          "message": {
            "text": "CommonBase.DEFAULT_TEST_CONTRACT (lib/forge-std/src/Base.sol#17) is never used in TestBasicProxy (test/BasicCheck.t.sol#7-27)\n",
            "markdown": "[CommonBase.DEFAULT_TEST_CONTRACT](lib/forge-std/src/Base.sol#L17) is never used in [TestBasicProxy](test/BasicCheck.t.sol#L7-L27)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/Base.sol"
                },
                "region": {
                  "startLine": 17,
                  "endLine": 17
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "99ceb0236c9342f10dfd061f69153574f822599cb764d52018e0d1864acd648e"
          }
        },
        {
          "ruleId": "3-0-unused-state",
          "message": {
            "text": "CommonBase.stdstore (lib/forge-std/src/Base.sol#28) is never used in TestBasicProxy (test/BasicCheck.t.sol#7-27)\n",
            "markdown": "[CommonBase.stdstore](lib/forge-std/src/Base.sol#L28) is never used in [TestBasicProxy](test/BasicCheck.t.sol#L7-L27)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/Base.sol"
                },
                "region": {
                  "startLine": 28,
                  "endLine": 28
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a393d526280ea72c4bc79950ae4b06e4366ad958ff05968813e97400f7f472a2"
          }
        },
        {
          "ruleId": "3-0-unused-state",
          "message": {
            "text": "CommonBase.UINT256_MAX (lib/forge-std/src/Base.sol#24-25) is never used in TestBasicProxy (test/BasicCheck.t.sol#7-27)\n",
            "markdown": "[CommonBase.UINT256_MAX](lib/forge-std/src/Base.sol#L24-L25) is never used in [TestBasicProxy](test/BasicCheck.t.sol#L7-L27)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/src/Base.sol"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 25
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e979187e18f2027eb23407ec5529934b187661cfd84626689052629febc2d629"
          }
        },
        {
          "ruleId": "4-0-constable-states",
          "message": {
            "text": "DSTest.IS_TEST (lib/forge-std/lib/ds-test/src/test.sol#38) should be constant \n",
            "markdown": "[DSTest.IS_TEST](lib/forge-std/lib/ds-test/src/test.sol#L38) should be constant \n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/forge-std/lib/ds-test/src/test.sol"
                },
                "region": {
                  "startLine": 38,
                  "endLine": 38
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2743b61767eda8d82607b222402b1199e539d1f3d4fbb85f6f8a09620c93b425"
          }
        }
      ]
    }
  ]
}